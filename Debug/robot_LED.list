
robot_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000202c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002224  08002224  00012224  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002234  08002234  00012234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800223c  0800223c  0001223c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002240  08002240  00012240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001ec  2000000c  08002250  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001f8  08002250  000201f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013bb2  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000024fe  00000000  00000000  00033bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005c4e  00000000  00000000  000360ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008b8  00000000  00000000  0003bd38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c58  00000000  00000000  0003c5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004fc9  00000000  00000000  0003d248  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003b34  00000000  00000000  00042211  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00045d45  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000018d0  00000000  00000000  00045dc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800220c 	.word	0x0800220c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800220c 	.word	0x0800220c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_InitTick+0x3c>)
{
 800054c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_InitTick+0x40>)
 8000550:	7818      	ldrb	r0, [r3, #0]
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f0 	udiv	r3, r3, r0
 800055a:	6810      	ldr	r0, [r2, #0]
 800055c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000560:	f000 f9d4 	bl	800090c <HAL_SYSTICK_Config>
 8000564:	4604      	mov	r4, r0
 8000566:	b958      	cbnz	r0, 8000580 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000568:	2d0f      	cmp	r5, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	4602      	mov	r2, r0
 800056e:	4629      	mov	r1, r5
 8000570:	f04f 30ff 	mov.w	r0, #4294967295
 8000574:	f000 f992 	bl	800089c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_InitTick+0x44>)
 800057a:	4620      	mov	r0, r4
 800057c:	601d      	str	r5, [r3, #0]
 800057e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000580:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000582:	bd38      	pop	{r3, r4, r5, pc}
 8000584:	20000000 	.word	0x20000000
 8000588:	20000008 	.word	0x20000008
 800058c:	20000004 	.word	0x20000004

08000590 <HAL_Init>:
{
 8000590:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000592:	2003      	movs	r0, #3
 8000594:	f000 f970 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ffd5 	bl	8000548 <HAL_InitTick>
  HAL_MspInit();
 800059e:	f001 fc75 	bl	8001e8c <HAL_MspInit>
}
 80005a2:	2000      	movs	r0, #0
 80005a4:	bd08      	pop	{r3, pc}
	...

080005a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x10>)
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_IncTick+0x14>)
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <HAL_GetTick+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000028 	.word	0x20000028

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b538      	push	{r3, r4, r5, lr}
 80005ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff fff6 	bl	80005c0 <HAL_GetTick>
 80005d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005d8:	bf1e      	ittt	ne
 80005da:	4b04      	ldrne	r3, [pc, #16]	; (80005ec <HAL_Delay+0x20>)
 80005dc:	781b      	ldrbne	r3, [r3, #0]
 80005de:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e0:	f7ff ffee 	bl	80005c0 <HAL_GetTick>
 80005e4:	1b40      	subs	r0, r0, r5
 80005e6:	4284      	cmp	r4, r0
 80005e8:	d8fa      	bhi.n	80005e0 <HAL_Delay+0x14>
  {
  }
}
 80005ea:	bd38      	pop	{r3, r4, r5, pc}
 80005ec:	20000000 	.word	0x20000000

080005f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005f0:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005f2:	4604      	mov	r4, r0
 80005f4:	2800      	cmp	r0, #0
 80005f6:	f000 8099 	beq.w	800072c <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80005fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80005fc:	b923      	cbnz	r3, 8000608 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005fe:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000600:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000604:	f001 fc88 	bl	8001f18 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800060a:	06db      	lsls	r3, r3, #27
 800060c:	f100 808c 	bmi.w	8000728 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000610:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000612:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000616:	f023 0302 	bic.w	r3, r3, #2
 800061a:	f043 0302 	orr.w	r3, r3, #2
 800061e:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000620:	4b43      	ldr	r3, [pc, #268]	; (8000730 <HAL_ADC_Init+0x140>)
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000628:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	6861      	ldr	r1, [r4, #4]
 800062e:	430a      	orrs	r2, r1
 8000630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000632:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000634:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800063c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000644:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000646:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000648:	685a      	ldr	r2, [r3, #4]
 800064a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800064e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000650:	685a      	ldr	r2, [r3, #4]
 8000652:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000654:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000656:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000658:	689a      	ldr	r2, [r3, #8]
 800065a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800065e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000660:	689a      	ldr	r2, [r3, #8]
 8000662:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000664:	4933      	ldr	r1, [pc, #204]	; (8000734 <HAL_ADC_Init+0x144>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000666:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000668:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800066a:	428a      	cmp	r2, r1
 800066c:	d050      	beq.n	8000710 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800066e:	6899      	ldr	r1, [r3, #8]
 8000670:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000674:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000676:	6899      	ldr	r1, [r3, #8]
 8000678:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800067a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800067c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800067e:	689a      	ldr	r2, [r3, #8]
 8000680:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800068a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800068c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800068e:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000690:	f022 0202 	bic.w	r2, r2, #2
 8000694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000696:	689a      	ldr	r2, [r3, #8]
 8000698:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800069c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800069e:	6a22      	ldr	r2, [r4, #32]
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	d03d      	beq.n	8000720 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006a4:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006ac:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80006b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006b8:	685a      	ldr	r2, [r3, #4]
 80006ba:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006be:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 80006c0:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006c4:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006ca:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80006d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006d8:	689a      	ldr	r2, [r3, #8]
 80006da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80006e0:	689a      	ldr	r2, [r3, #8]
 80006e2:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006e6:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80006e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006ea:	689a      	ldr	r2, [r3, #8]
 80006ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006f2:	689a      	ldr	r2, [r3, #8]
 80006f4:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006f8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006fa:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006fe:	f023 0303 	bic.w	r3, r3, #3
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000708:	2300      	movs	r3, #0
 800070a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800070e:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000710:	689a      	ldr	r2, [r3, #8]
 8000712:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000716:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000718:	689a      	ldr	r2, [r3, #8]
 800071a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800071e:	e7b4      	b.n	800068a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000720:	685a      	ldr	r2, [r3, #4]
 8000722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000726:	e7ca      	b.n	80006be <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000728:	2001      	movs	r0, #1
 800072a:	e7ed      	b.n	8000708 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 800072c:	2001      	movs	r0, #1
}
 800072e:	bd10      	pop	{r4, pc}
 8000730:	40012300 	.word	0x40012300
 8000734:	0f000001 	.word	0x0f000001

08000738 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8000738:	2300      	movs	r3, #0
{
 800073a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 800073c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800073e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000742:	2b01      	cmp	r3, #1
 8000744:	d071      	beq.n	800082a <HAL_ADC_ConfigChannel+0xf2>
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000746:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8000748:	2301      	movs	r3, #1
 800074a:	6804      	ldr	r4, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 800074c:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800074e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000752:	b2ae      	uxth	r6, r5
 8000754:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000756:	d931      	bls.n	80007bc <HAL_ADC_ConfigChannel+0x84>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000758:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800075c:	f04f 0e07 	mov.w	lr, #7
 8000760:	68e7      	ldr	r7, [r4, #12]
 8000762:	3b1e      	subs	r3, #30
 8000764:	fa0e fe03 	lsl.w	lr, lr, r3
 8000768:	ea27 070e 	bic.w	r7, r7, lr
 800076c:	60e7      	str	r7, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800076e:	4f3d      	ldr	r7, [pc, #244]	; (8000864 <HAL_ADC_ConfigChannel+0x12c>)
 8000770:	42bd      	cmp	r5, r7
 8000772:	d11e      	bne.n	80007b2 <HAL_ADC_ConfigChannel+0x7a>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000774:	68e3      	ldr	r3, [r4, #12]
 8000776:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800077a:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7)
 800077c:	684a      	ldr	r2, [r1, #4]
 800077e:	2a06      	cmp	r2, #6
 8000780:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000784:	d82a      	bhi.n	80007dc <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000786:	4413      	add	r3, r2
 8000788:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800078a:	1f59      	subs	r1, r3, #5
 800078c:	231f      	movs	r3, #31
 800078e:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000790:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000794:	ea27 0303 	bic.w	r3, r7, r3
 8000798:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800079a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800079c:	4311      	orrs	r1, r2
 800079e:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007a0:	4b31      	ldr	r3, [pc, #196]	; (8000868 <HAL_ADC_ConfigChannel+0x130>)
 80007a2:	429c      	cmp	r4, r3
 80007a4:	d039      	beq.n	800081a <HAL_ADC_ConfigChannel+0xe2>
  __HAL_UNLOCK(hadc);
 80007a6:	2300      	movs	r3, #0
 80007a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80007ac:	4618      	mov	r0, r3
}
 80007ae:	b003      	add	sp, #12
 80007b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80007b2:	68e7      	ldr	r7, [r4, #12]
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	433b      	orrs	r3, r7
 80007ba:	e7de      	b.n	800077a <HAL_ADC_ConfigChannel+0x42>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80007bc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80007c0:	f04f 0e07 	mov.w	lr, #7
 80007c4:	6927      	ldr	r7, [r4, #16]
 80007c6:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80007ce:	ea27 070e 	bic.w	r7, r7, lr
 80007d2:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80007d4:	6927      	ldr	r7, [r4, #16]
 80007d6:	433b      	orrs	r3, r7
 80007d8:	6123      	str	r3, [r4, #16]
 80007da:	e7cf      	b.n	800077c <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13)
 80007dc:	2a0c      	cmp	r2, #12
 80007de:	d80e      	bhi.n	80007fe <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007e0:	4413      	add	r3, r2
 80007e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80007e4:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80007e8:	231f      	movs	r3, #31
 80007ea:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007ec:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007f0:	ea21 0303 	bic.w	r3, r1, r3
 80007f4:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007f8:	431a      	orrs	r2, r3
 80007fa:	6322      	str	r2, [r4, #48]	; 0x30
 80007fc:	e7d0      	b.n	80007a0 <HAL_ADC_ConfigChannel+0x68>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007fe:	4413      	add	r3, r2
 8000800:	221f      	movs	r2, #31
 8000802:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000804:	3b41      	subs	r3, #65	; 0x41
 8000806:	409a      	lsls	r2, r3
 8000808:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800080c:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000810:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000812:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000814:	4311      	orrs	r1, r2
 8000816:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000818:	e7c2      	b.n	80007a0 <HAL_ADC_ConfigChannel+0x68>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800081a:	2d12      	cmp	r5, #18
 800081c:	d107      	bne.n	800082e <HAL_ADC_ConfigChannel+0xf6>
    ADC->CCR |= ADC_CCR_VBATE;
 800081e:	4a13      	ldr	r2, [pc, #76]	; (800086c <HAL_ADC_ConfigChannel+0x134>)
 8000820:	6853      	ldr	r3, [r2, #4]
 8000822:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000826:	6053      	str	r3, [r2, #4]
 8000828:	e7bd      	b.n	80007a6 <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 800082a:	2002      	movs	r0, #2
 800082c:	e7bf      	b.n	80007ae <HAL_ADC_ConfigChannel+0x76>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <HAL_ADC_ConfigChannel+0x12c>)
 8000830:	429d      	cmp	r5, r3
 8000832:	d001      	beq.n	8000838 <HAL_ADC_ConfigChannel+0x100>
 8000834:	2d11      	cmp	r5, #17
 8000836:	d1b6      	bne.n	80007a6 <HAL_ADC_ConfigChannel+0x6e>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000838:	490c      	ldr	r1, [pc, #48]	; (800086c <HAL_ADC_ConfigChannel+0x134>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800083a:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 800083c:	684a      	ldr	r2, [r1, #4]
 800083e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000842:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000844:	d1af      	bne.n	80007a6 <HAL_ADC_ConfigChannel+0x6e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_ADC_ConfigChannel+0x138>)
 8000848:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <HAL_ADC_ConfigChannel+0x13c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000850:	230a      	movs	r3, #10
 8000852:	4353      	muls	r3, r2
        counter--;
 8000854:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8000856:	9b01      	ldr	r3, [sp, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0a4      	beq.n	80007a6 <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 800085c:	9b01      	ldr	r3, [sp, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	e7f8      	b.n	8000854 <HAL_ADC_ConfigChannel+0x11c>
 8000862:	bf00      	nop
 8000864:	10000012 	.word	0x10000012
 8000868:	40012000 	.word	0x40012000
 800086c:	40012300 	.word	0x40012300
 8000870:	20000008 	.word	0x20000008
 8000874:	000f4240 	.word	0x000f4240

08000878 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800087a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800087c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800087e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000882:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000886:	041b      	lsls	r3, r3, #16
 8000888:	0c1b      	lsrs	r3, r3, #16
 800088a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800088e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000892:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000894:	60d3      	str	r3, [r2, #12]
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800089e:	b530      	push	{r4, r5, lr}
 80008a0:	68dc      	ldr	r4, [r3, #12]
 80008a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	bf28      	it	cs
 80008b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b8:	bf8c      	ite	hi
 80008ba:	3c03      	subhi	r4, #3
 80008bc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008be:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80008c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80008c8:	ea01 0103 	and.w	r1, r1, r3
 80008cc:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d0:	fa05 f404 	lsl.w	r4, r5, r4
 80008d4:	f104 34ff 	add.w	r4, r4, #4294967295
 80008d8:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	ea42 0201 	orr.w	r2, r2, r1
 80008e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 80008e4:	da05      	bge.n	80008f2 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	f000 000f 	and.w	r0, r0, #15
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_NVIC_SetPriority+0x6c>)
 80008ee:	541a      	strb	r2, [r3, r0]
 80008f0:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80008fc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000900:	bd30      	pop	{r4, r5, pc}
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00
 8000908:	e000ed14 	.word	0xe000ed14

0800090c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	3801      	subs	r0, #1
 800090e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000912:	d20a      	bcs.n	800092a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000916:	21f0      	movs	r1, #240	; 0xf0
 8000918:	4a06      	ldr	r2, [pc, #24]	; (8000934 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800091c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000922:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000924:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800092a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000e010 	.word	0xe000e010
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800093a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	bf0c      	ite	eq
 8000940:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000944:	f022 0204 	bicne.w	r2, r2, #4
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	4770      	bx	lr
 800094c:	e000e010 	.word	0xe000e010

08000950 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000950:	4770      	bx	lr

08000952 <HAL_SYSTICK_IRQHandler>:
{
 8000952:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000954:	f7ff fffc 	bl	8000950 <HAL_SYSTICK_Callback>
 8000958:	bd08      	pop	{r3, pc}
	...

0800095c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800095c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000960:	680b      	ldr	r3, [r1, #0]
{
 8000962:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000964:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000b28 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000968:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800096a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800096c:	4a6c      	ldr	r2, [pc, #432]	; (8000b20 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800096e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000b2c <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000972:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000976:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000978:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800097c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000980:	45b6      	cmp	lr, r6
 8000982:	f040 80b3 	bne.w	8000aec <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000986:	684c      	ldr	r4, [r1, #4]
 8000988:	f024 0710 	bic.w	r7, r4, #16
 800098c:	2f02      	cmp	r7, #2
 800098e:	d116      	bne.n	80009be <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000990:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000994:	f003 0b07 	and.w	fp, r3, #7
 8000998:	f04f 0c0f 	mov.w	ip, #15
 800099c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80009a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80009a4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80009a8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80009ac:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80009b0:	690d      	ldr	r5, [r1, #16]
 80009b2:	fa05 f50b 	lsl.w	r5, r5, fp
 80009b6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80009ba:	f8ca 5020 	str.w	r5, [sl, #32]
 80009be:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009c2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80009c4:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009c8:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009cc:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009d2:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009d6:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d8:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009da:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009de:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 80009e2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e6:	d811      	bhi.n	8000a0c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80009e8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80009ea:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80009ee:	68cf      	ldr	r7, [r1, #12]
 80009f0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80009f4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80009f8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80009fa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009fc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000a00:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000a04:	409f      	lsls	r7, r3
 8000a06:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000a0a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a0c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a0e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000a10:	688f      	ldr	r7, [r1, #8]
 8000a12:	fa07 f70a 	lsl.w	r7, r7, sl
 8000a16:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000a18:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a1a:	00e5      	lsls	r5, r4, #3
 8000a1c:	d566      	bpl.n	8000aec <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000a22:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a26:	f003 0e03 	and.w	lr, r3, #3
 8000a2a:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000a32:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a36:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000a3e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000a42:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000a46:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000a4a:	9503      	str	r5, [sp, #12]
 8000a4c:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a4e:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000a52:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a56:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a5a:	4d32      	ldr	r5, [pc, #200]	; (8000b24 <HAL_GPIO_Init+0x1c8>)
 8000a5c:	42a8      	cmp	r0, r5
 8000a5e:	d04c      	beq.n	8000afa <HAL_GPIO_Init+0x19e>
 8000a60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a64:	42a8      	cmp	r0, r5
 8000a66:	d04a      	beq.n	8000afe <HAL_GPIO_Init+0x1a2>
 8000a68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a6c:	42a8      	cmp	r0, r5
 8000a6e:	d048      	beq.n	8000b02 <HAL_GPIO_Init+0x1a6>
 8000a70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a74:	42a8      	cmp	r0, r5
 8000a76:	d046      	beq.n	8000b06 <HAL_GPIO_Init+0x1aa>
 8000a78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a7c:	42a8      	cmp	r0, r5
 8000a7e:	d044      	beq.n	8000b0a <HAL_GPIO_Init+0x1ae>
 8000a80:	4548      	cmp	r0, r9
 8000a82:	d044      	beq.n	8000b0e <HAL_GPIO_Init+0x1b2>
 8000a84:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000a88:	42a8      	cmp	r0, r5
 8000a8a:	d042      	beq.n	8000b12 <HAL_GPIO_Init+0x1b6>
 8000a8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a90:	42a8      	cmp	r0, r5
 8000a92:	d040      	beq.n	8000b16 <HAL_GPIO_Init+0x1ba>
 8000a94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a98:	42a8      	cmp	r0, r5
 8000a9a:	d03e      	beq.n	8000b1a <HAL_GPIO_Init+0x1be>
 8000a9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000aa0:	42a8      	cmp	r0, r5
 8000aa2:	bf14      	ite	ne
 8000aa4:	250a      	movne	r5, #10
 8000aa6:	2509      	moveq	r5, #9
 8000aa8:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aac:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ab0:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ab4:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ab6:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000aba:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000abc:	bf0c      	ite	eq
 8000abe:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ac0:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000ac6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000ac8:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000aca:	bf0c      	ite	eq
 8000acc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ace:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000ad4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000ad6:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ad8:	bf0c      	ite	eq
 8000ada:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000adc:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ade:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000ae0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000ae2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000ae4:	bf54      	ite	pl
 8000ae6:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000ae8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000aea:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000aec:	3301      	adds	r3, #1
 8000aee:	2b10      	cmp	r3, #16
 8000af0:	f47f af3f 	bne.w	8000972 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000af4:	b005      	add	sp, #20
 8000af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000afa:	2500      	movs	r5, #0
 8000afc:	e7d4      	b.n	8000aa8 <HAL_GPIO_Init+0x14c>
 8000afe:	2501      	movs	r5, #1
 8000b00:	e7d2      	b.n	8000aa8 <HAL_GPIO_Init+0x14c>
 8000b02:	2502      	movs	r5, #2
 8000b04:	e7d0      	b.n	8000aa8 <HAL_GPIO_Init+0x14c>
 8000b06:	2503      	movs	r5, #3
 8000b08:	e7ce      	b.n	8000aa8 <HAL_GPIO_Init+0x14c>
 8000b0a:	2504      	movs	r5, #4
 8000b0c:	e7cc      	b.n	8000aa8 <HAL_GPIO_Init+0x14c>
 8000b0e:	2505      	movs	r5, #5
 8000b10:	e7ca      	b.n	8000aa8 <HAL_GPIO_Init+0x14c>
 8000b12:	2506      	movs	r5, #6
 8000b14:	e7c8      	b.n	8000aa8 <HAL_GPIO_Init+0x14c>
 8000b16:	2507      	movs	r5, #7
 8000b18:	e7c6      	b.n	8000aa8 <HAL_GPIO_Init+0x14c>
 8000b1a:	2508      	movs	r5, #8
 8000b1c:	e7c4      	b.n	8000aa8 <HAL_GPIO_Init+0x14c>
 8000b1e:	bf00      	nop
 8000b20:	40013c00 	.word	0x40013c00
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40021400 	.word	0x40021400

08000b30 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b30:	6903      	ldr	r3, [r0, #16]
 8000b32:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000b34:	bf14      	ite	ne
 8000b36:	2001      	movne	r0, #1
 8000b38:	2000      	moveq	r0, #0
 8000b3a:	4770      	bx	lr

08000b3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b3c:	b10a      	cbz	r2, 8000b42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000b3e:	6181      	str	r1, [r0, #24]
 8000b40:	4770      	bx	lr
 8000b42:	0409      	lsls	r1, r1, #16
 8000b44:	e7fb      	b.n	8000b3e <HAL_GPIO_WritePin+0x2>
	...

08000b48 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000b4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000b4e:	4c19      	ldr	r4, [pc, #100]	; (8000bb4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b54:	641a      	str	r2, [r3, #64]	; 0x40
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	9301      	str	r3, [sp, #4]
 8000b5e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000b60:	6823      	ldr	r3, [r4, #0]
 8000b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b66:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b68:	f7ff fd2a 	bl	80005c0 <HAL_GetTick>
 8000b6c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000b6e:	6863      	ldr	r3, [r4, #4]
 8000b70:	03da      	lsls	r2, r3, #15
 8000b72:	d50c      	bpl.n	8000b8e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b7c:	f7ff fd20 	bl	80005c0 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000b80:	4c0c      	ldr	r4, [pc, #48]	; (8000bb4 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8000b82:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000b84:	6863      	ldr	r3, [r4, #4]
 8000b86:	039b      	lsls	r3, r3, #14
 8000b88:	d50a      	bpl.n	8000ba0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	e006      	b.n	8000b9c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000b8e:	f7ff fd17 	bl	80005c0 <HAL_GetTick>
 8000b92:	1b40      	subs	r0, r0, r5
 8000b94:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000b98:	d9e9      	bls.n	8000b6e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000b9a:	2003      	movs	r0, #3
}
 8000b9c:	b003      	add	sp, #12
 8000b9e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ba0:	f7ff fd0e 	bl	80005c0 <HAL_GetTick>
 8000ba4:	1b40      	subs	r0, r0, r5
 8000ba6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000baa:	d9eb      	bls.n	8000b84 <HAL_PWREx_EnableOverDrive+0x3c>
 8000bac:	e7f5      	b.n	8000b9a <HAL_PWREx_EnableOverDrive+0x52>
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40007000 	.word	0x40007000

08000bb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bbc:	4604      	mov	r4, r0
 8000bbe:	b918      	cbnz	r0, 8000bc8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000bc0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000bc2:	b002      	add	sp, #8
 8000bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc8:	6803      	ldr	r3, [r0, #0]
 8000bca:	07d8      	lsls	r0, r3, #31
 8000bcc:	d410      	bmi.n	8000bf0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	0799      	lsls	r1, r3, #30
 8000bd2:	d45e      	bmi.n	8000c92 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	0719      	lsls	r1, r3, #28
 8000bd8:	f100 80a3 	bmi.w	8000d22 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bdc:	6823      	ldr	r3, [r4, #0]
 8000bde:	075a      	lsls	r2, r3, #29
 8000be0:	f100 80c4 	bmi.w	8000d6c <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000be4:	69a2      	ldr	r2, [r4, #24]
 8000be6:	2a00      	cmp	r2, #0
 8000be8:	f040 812e 	bne.w	8000e48 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8000bec:	2000      	movs	r0, #0
 8000bee:	e7e8      	b.n	8000bc2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bf0:	4b93      	ldr	r3, [pc, #588]	; (8000e40 <HAL_RCC_OscConfig+0x288>)
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	f002 020c 	and.w	r2, r2, #12
 8000bf8:	2a04      	cmp	r2, #4
 8000bfa:	d007      	beq.n	8000c0c <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	f002 020c 	and.w	r2, r2, #12
 8000c02:	2a08      	cmp	r2, #8
 8000c04:	d10a      	bne.n	8000c1c <HAL_RCC_OscConfig+0x64>
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	025a      	lsls	r2, r3, #9
 8000c0a:	d507      	bpl.n	8000c1c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c0c:	4b8c      	ldr	r3, [pc, #560]	; (8000e40 <HAL_RCC_OscConfig+0x288>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	039b      	lsls	r3, r3, #14
 8000c12:	d5dc      	bpl.n	8000bce <HAL_RCC_OscConfig+0x16>
 8000c14:	6863      	ldr	r3, [r4, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1d9      	bne.n	8000bce <HAL_RCC_OscConfig+0x16>
 8000c1a:	e7d1      	b.n	8000bc0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c1c:	6863      	ldr	r3, [r4, #4]
 8000c1e:	4d88      	ldr	r5, [pc, #544]	; (8000e40 <HAL_RCC_OscConfig+0x288>)
 8000c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c24:	d111      	bne.n	8000c4a <HAL_RCC_OscConfig+0x92>
 8000c26:	682b      	ldr	r3, [r5, #0]
 8000c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c2e:	f7ff fcc7 	bl	80005c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c32:	4d83      	ldr	r5, [pc, #524]	; (8000e40 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000c34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c36:	682b      	ldr	r3, [r5, #0]
 8000c38:	039f      	lsls	r7, r3, #14
 8000c3a:	d4c8      	bmi.n	8000bce <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c3c:	f7ff fcc0 	bl	80005c0 <HAL_GetTick>
 8000c40:	1b80      	subs	r0, r0, r6
 8000c42:	2864      	cmp	r0, #100	; 0x64
 8000c44:	d9f7      	bls.n	8000c36 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000c46:	2003      	movs	r0, #3
 8000c48:	e7bb      	b.n	8000bc2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c4a:	b99b      	cbnz	r3, 8000c74 <HAL_RCC_OscConfig+0xbc>
 8000c4c:	682b      	ldr	r3, [r5, #0]
 8000c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c52:	602b      	str	r3, [r5, #0]
 8000c54:	682b      	ldr	r3, [r5, #0]
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fcb0 	bl	80005c0 <HAL_GetTick>
 8000c60:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c62:	682b      	ldr	r3, [r5, #0]
 8000c64:	0398      	lsls	r0, r3, #14
 8000c66:	d5b2      	bpl.n	8000bce <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c68:	f7ff fcaa 	bl	80005c0 <HAL_GetTick>
 8000c6c:	1b80      	subs	r0, r0, r6
 8000c6e:	2864      	cmp	r0, #100	; 0x64
 8000c70:	d9f7      	bls.n	8000c62 <HAL_RCC_OscConfig+0xaa>
 8000c72:	e7e8      	b.n	8000c46 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c78:	682b      	ldr	r3, [r5, #0]
 8000c7a:	d103      	bne.n	8000c84 <HAL_RCC_OscConfig+0xcc>
 8000c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c80:	602b      	str	r3, [r5, #0]
 8000c82:	e7d0      	b.n	8000c26 <HAL_RCC_OscConfig+0x6e>
 8000c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c88:	602b      	str	r3, [r5, #0]
 8000c8a:	682b      	ldr	r3, [r5, #0]
 8000c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c90:	e7cc      	b.n	8000c2c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c92:	4b6b      	ldr	r3, [pc, #428]	; (8000e40 <HAL_RCC_OscConfig+0x288>)
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	f012 0f0c 	tst.w	r2, #12
 8000c9a:	d007      	beq.n	8000cac <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	f002 020c 	and.w	r2, r2, #12
 8000ca2:	2a08      	cmp	r2, #8
 8000ca4:	d111      	bne.n	8000cca <HAL_RCC_OscConfig+0x112>
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	0259      	lsls	r1, r3, #9
 8000caa:	d40e      	bmi.n	8000cca <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cac:	4b64      	ldr	r3, [pc, #400]	; (8000e40 <HAL_RCC_OscConfig+0x288>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	0792      	lsls	r2, r2, #30
 8000cb2:	d502      	bpl.n	8000cba <HAL_RCC_OscConfig+0x102>
 8000cb4:	68e2      	ldr	r2, [r4, #12]
 8000cb6:	2a01      	cmp	r2, #1
 8000cb8:	d182      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	6921      	ldr	r1, [r4, #16]
 8000cbe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000cc2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000cc6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc8:	e784      	b.n	8000bd4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cca:	68e3      	ldr	r3, [r4, #12]
 8000ccc:	4d5c      	ldr	r5, [pc, #368]	; (8000e40 <HAL_RCC_OscConfig+0x288>)
 8000cce:	b1bb      	cbz	r3, 8000d00 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000cd0:	682b      	ldr	r3, [r5, #0]
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fc72 	bl	80005c0 <HAL_GetTick>
 8000cdc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cde:	682b      	ldr	r3, [r5, #0]
 8000ce0:	079f      	lsls	r7, r3, #30
 8000ce2:	d507      	bpl.n	8000cf4 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ce4:	682b      	ldr	r3, [r5, #0]
 8000ce6:	6922      	ldr	r2, [r4, #16]
 8000ce8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000cf0:	602b      	str	r3, [r5, #0]
 8000cf2:	e76f      	b.n	8000bd4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cf4:	f7ff fc64 	bl	80005c0 <HAL_GetTick>
 8000cf8:	1b80      	subs	r0, r0, r6
 8000cfa:	2802      	cmp	r0, #2
 8000cfc:	d9ef      	bls.n	8000cde <HAL_RCC_OscConfig+0x126>
 8000cfe:	e7a2      	b.n	8000c46 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000d00:	682b      	ldr	r3, [r5, #0]
 8000d02:	f023 0301 	bic.w	r3, r3, #1
 8000d06:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d08:	f7ff fc5a 	bl	80005c0 <HAL_GetTick>
 8000d0c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d0e:	682b      	ldr	r3, [r5, #0]
 8000d10:	0798      	lsls	r0, r3, #30
 8000d12:	f57f af5f 	bpl.w	8000bd4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d16:	f7ff fc53 	bl	80005c0 <HAL_GetTick>
 8000d1a:	1b80      	subs	r0, r0, r6
 8000d1c:	2802      	cmp	r0, #2
 8000d1e:	d9f6      	bls.n	8000d0e <HAL_RCC_OscConfig+0x156>
 8000d20:	e791      	b.n	8000c46 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d22:	6963      	ldr	r3, [r4, #20]
 8000d24:	4d46      	ldr	r5, [pc, #280]	; (8000e40 <HAL_RCC_OscConfig+0x288>)
 8000d26:	b183      	cbz	r3, 8000d4a <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000d28:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000d30:	f7ff fc46 	bl	80005c0 <HAL_GetTick>
 8000d34:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d36:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d38:	079b      	lsls	r3, r3, #30
 8000d3a:	f53f af4f 	bmi.w	8000bdc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d3e:	f7ff fc3f 	bl	80005c0 <HAL_GetTick>
 8000d42:	1b80      	subs	r0, r0, r6
 8000d44:	2802      	cmp	r0, #2
 8000d46:	d9f6      	bls.n	8000d36 <HAL_RCC_OscConfig+0x17e>
 8000d48:	e77d      	b.n	8000c46 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000d4a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d4c:	f023 0301 	bic.w	r3, r3, #1
 8000d50:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000d52:	f7ff fc35 	bl	80005c0 <HAL_GetTick>
 8000d56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d58:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d5a:	079f      	lsls	r7, r3, #30
 8000d5c:	f57f af3e 	bpl.w	8000bdc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d60:	f7ff fc2e 	bl	80005c0 <HAL_GetTick>
 8000d64:	1b80      	subs	r0, r0, r6
 8000d66:	2802      	cmp	r0, #2
 8000d68:	d9f6      	bls.n	8000d58 <HAL_RCC_OscConfig+0x1a0>
 8000d6a:	e76c      	b.n	8000c46 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d6c:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <HAL_RCC_OscConfig+0x288>)
 8000d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d70:	00d0      	lsls	r0, r2, #3
 8000d72:	d427      	bmi.n	8000dc4 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000d76:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d88:	4d2e      	ldr	r5, [pc, #184]	; (8000e44 <HAL_RCC_OscConfig+0x28c>)
 8000d8a:	682b      	ldr	r3, [r5, #0]
 8000d8c:	05d9      	lsls	r1, r3, #23
 8000d8e:	d51b      	bpl.n	8000dc8 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d90:	68a3      	ldr	r3, [r4, #8]
 8000d92:	4d2b      	ldr	r5, [pc, #172]	; (8000e40 <HAL_RCC_OscConfig+0x288>)
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d127      	bne.n	8000de8 <HAL_RCC_OscConfig+0x230>
 8000d98:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000da0:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000da4:	f7ff fc0c 	bl	80005c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000da8:	4f25      	ldr	r7, [pc, #148]	; (8000e40 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000daa:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000dae:	079b      	lsls	r3, r3, #30
 8000db0:	d53f      	bpl.n	8000e32 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f43f af16 	beq.w	8000be4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000db8:	4a21      	ldr	r2, [pc, #132]	; (8000e40 <HAL_RCC_OscConfig+0x288>)
 8000dba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	e70f      	b.n	8000be4 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	e7df      	b.n	8000d88 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8000dc8:	682b      	ldr	r3, [r5, #0]
 8000dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dce:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000dd0:	f7ff fbf6 	bl	80005c0 <HAL_GetTick>
 8000dd4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dd6:	682b      	ldr	r3, [r5, #0]
 8000dd8:	05da      	lsls	r2, r3, #23
 8000dda:	d4d9      	bmi.n	8000d90 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000ddc:	f7ff fbf0 	bl	80005c0 <HAL_GetTick>
 8000de0:	1bc0      	subs	r0, r0, r7
 8000de2:	2864      	cmp	r0, #100	; 0x64
 8000de4:	d9f7      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x21e>
 8000de6:	e72e      	b.n	8000c46 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de8:	b9ab      	cbnz	r3, 8000e16 <HAL_RCC_OscConfig+0x25e>
 8000dea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dec:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000df0:	f023 0301 	bic.w	r3, r3, #1
 8000df4:	672b      	str	r3, [r5, #112]	; 0x70
 8000df6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000df8:	f023 0304 	bic.w	r3, r3, #4
 8000dfc:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000dfe:	f7ff fbdf 	bl	80005c0 <HAL_GetTick>
 8000e02:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e06:	0798      	lsls	r0, r3, #30
 8000e08:	d5d3      	bpl.n	8000db2 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e0a:	f7ff fbd9 	bl	80005c0 <HAL_GetTick>
 8000e0e:	1bc0      	subs	r0, r0, r7
 8000e10:	4540      	cmp	r0, r8
 8000e12:	d9f7      	bls.n	8000e04 <HAL_RCC_OscConfig+0x24c>
 8000e14:	e717      	b.n	8000c46 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e16:	2b05      	cmp	r3, #5
 8000e18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e1a:	d103      	bne.n	8000e24 <HAL_RCC_OscConfig+0x26c>
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	672b      	str	r3, [r5, #112]	; 0x70
 8000e22:	e7b9      	b.n	8000d98 <HAL_RCC_OscConfig+0x1e0>
 8000e24:	f023 0301 	bic.w	r3, r3, #1
 8000e28:	672b      	str	r3, [r5, #112]	; 0x70
 8000e2a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e2c:	f023 0304 	bic.w	r3, r3, #4
 8000e30:	e7b5      	b.n	8000d9e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e32:	f7ff fbc5 	bl	80005c0 <HAL_GetTick>
 8000e36:	eba0 0008 	sub.w	r0, r0, r8
 8000e3a:	42a8      	cmp	r0, r5
 8000e3c:	d9b6      	bls.n	8000dac <HAL_RCC_OscConfig+0x1f4>
 8000e3e:	e702      	b.n	8000c46 <HAL_RCC_OscConfig+0x8e>
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e48:	4d24      	ldr	r5, [pc, #144]	; (8000edc <HAL_RCC_OscConfig+0x324>)
 8000e4a:	68ab      	ldr	r3, [r5, #8]
 8000e4c:	f003 030c 	and.w	r3, r3, #12
 8000e50:	2b08      	cmp	r3, #8
 8000e52:	f43f aeb5 	beq.w	8000bc0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8000e56:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e58:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e5e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e60:	d12f      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8000e62:	f7ff fbad 	bl	80005c0 <HAL_GetTick>
 8000e66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e68:	682b      	ldr	r3, [r5, #0]
 8000e6a:	0199      	lsls	r1, r3, #6
 8000e6c:	d423      	bmi.n	8000eb6 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e6e:	6a22      	ldr	r2, [r4, #32]
 8000e70:	69e3      	ldr	r3, [r4, #28]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e76:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000e7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000e80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e82:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000e86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e88:	4c14      	ldr	r4, [pc, #80]	; (8000edc <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e8a:	0852      	lsrs	r2, r2, #1
 8000e8c:	3a01      	subs	r2, #1
 8000e8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e92:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e94:	682b      	ldr	r3, [r5, #0]
 8000e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e9a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fb90 	bl	80005c0 <HAL_GetTick>
 8000ea0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	019a      	lsls	r2, r3, #6
 8000ea6:	f53f aea1 	bmi.w	8000bec <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eaa:	f7ff fb89 	bl	80005c0 <HAL_GetTick>
 8000eae:	1b40      	subs	r0, r0, r5
 8000eb0:	2802      	cmp	r0, #2
 8000eb2:	d9f6      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x2ea>
 8000eb4:	e6c7      	b.n	8000c46 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eb6:	f7ff fb83 	bl	80005c0 <HAL_GetTick>
 8000eba:	1b80      	subs	r0, r0, r6
 8000ebc:	2802      	cmp	r0, #2
 8000ebe:	d9d3      	bls.n	8000e68 <HAL_RCC_OscConfig+0x2b0>
 8000ec0:	e6c1      	b.n	8000c46 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fb7d 	bl	80005c0 <HAL_GetTick>
 8000ec6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ec8:	682b      	ldr	r3, [r5, #0]
 8000eca:	019b      	lsls	r3, r3, #6
 8000ecc:	f57f ae8e 	bpl.w	8000bec <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed0:	f7ff fb76 	bl	80005c0 <HAL_GetTick>
 8000ed4:	1b00      	subs	r0, r0, r4
 8000ed6:	2802      	cmp	r0, #2
 8000ed8:	d9f6      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x310>
 8000eda:	e6b4      	b.n	8000c46 <HAL_RCC_OscConfig+0x8e>
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ee0:	4913      	ldr	r1, [pc, #76]	; (8000f30 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000ee2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ee4:	688b      	ldr	r3, [r1, #8]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d003      	beq.n	8000ef6 <HAL_RCC_GetSysClockFreq+0x16>
 8000eee:	2b08      	cmp	r3, #8
 8000ef0:	d003      	beq.n	8000efa <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ef2:	4810      	ldr	r0, [pc, #64]	; (8000f34 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ef4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000ef6:	4810      	ldr	r0, [pc, #64]	; (8000f38 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ef8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000efa:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000efc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000efe:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f00:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000f04:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f08:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000f0c:	bf1a      	itte	ne
 8000f0e:	480a      	ldrne	r0, [pc, #40]	; (8000f38 <HAL_RCC_GetSysClockFreq+0x58>)
 8000f10:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f12:	4808      	ldreq	r0, [pc, #32]	; (8000f34 <HAL_RCC_GetSysClockFreq+0x54>)
 8000f14:	fba1 0100 	umull	r0, r1, r1, r0
 8000f18:	f7ff f98e 	bl	8000238 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <HAL_RCC_GetSysClockFreq+0x50>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000f24:	3301      	adds	r3, #1
 8000f26:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000f28:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f2c:	bd08      	pop	{r3, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	00f42400 	.word	0x00f42400
 8000f38:	017d7840 	.word	0x017d7840

08000f3c <HAL_RCC_ClockConfig>:
{
 8000f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f40:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000f42:	4604      	mov	r4, r0
 8000f44:	b910      	cbnz	r0, 8000f4c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f46:	2001      	movs	r0, #1
 8000f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f4c:	4a46      	ldr	r2, [pc, #280]	; (8001068 <HAL_RCC_ClockConfig+0x12c>)
 8000f4e:	6813      	ldr	r3, [r2, #0]
 8000f50:	f003 030f 	and.w	r3, r3, #15
 8000f54:	428b      	cmp	r3, r1
 8000f56:	d328      	bcc.n	8000faa <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f58:	6821      	ldr	r1, [r4, #0]
 8000f5a:	078f      	lsls	r7, r1, #30
 8000f5c:	d430      	bmi.n	8000fc0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f5e:	07c8      	lsls	r0, r1, #31
 8000f60:	d443      	bmi.n	8000fea <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f62:	4a41      	ldr	r2, [pc, #260]	; (8001068 <HAL_RCC_ClockConfig+0x12c>)
 8000f64:	6813      	ldr	r3, [r2, #0]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	429d      	cmp	r5, r3
 8000f6c:	d367      	bcc.n	800103e <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f6e:	6822      	ldr	r2, [r4, #0]
 8000f70:	0751      	lsls	r1, r2, #29
 8000f72:	d470      	bmi.n	8001056 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f74:	0713      	lsls	r3, r2, #28
 8000f76:	d507      	bpl.n	8000f88 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f78:	4a3c      	ldr	r2, [pc, #240]	; (800106c <HAL_RCC_ClockConfig+0x130>)
 8000f7a:	6921      	ldr	r1, [r4, #16]
 8000f7c:	6893      	ldr	r3, [r2, #8]
 8000f7e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f82:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f86:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f88:	f7ff ffaa 	bl	8000ee0 <HAL_RCC_GetSysClockFreq>
 8000f8c:	4b37      	ldr	r3, [pc, #220]	; (800106c <HAL_RCC_ClockConfig+0x130>)
 8000f8e:	4a38      	ldr	r2, [pc, #224]	; (8001070 <HAL_RCC_ClockConfig+0x134>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f96:	5cd3      	ldrb	r3, [r2, r3]
 8000f98:	40d8      	lsrs	r0, r3
 8000f9a:	4b36      	ldr	r3, [pc, #216]	; (8001074 <HAL_RCC_ClockConfig+0x138>)
 8000f9c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fad2 	bl	8000548 <HAL_InitTick>
  return HAL_OK;
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000faa:	6813      	ldr	r3, [r2, #0]
 8000fac:	f023 030f 	bic.w	r3, r3, #15
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fb4:	6813      	ldr	r3, [r2, #0]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d1c3      	bne.n	8000f46 <HAL_RCC_ClockConfig+0xa>
 8000fbe:	e7cb      	b.n	8000f58 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc0:	f011 0f04 	tst.w	r1, #4
 8000fc4:	4b29      	ldr	r3, [pc, #164]	; (800106c <HAL_RCC_ClockConfig+0x130>)
 8000fc6:	d003      	beq.n	8000fd0 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8000fce:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd0:	070e      	lsls	r6, r1, #28
 8000fd2:	d503      	bpl.n	8000fdc <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8000fda:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	68a0      	ldr	r0, [r4, #8]
 8000fe0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000fe4:	4302      	orrs	r2, r0
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	e7b9      	b.n	8000f5e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fea:	6861      	ldr	r1, [r4, #4]
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <HAL_RCC_ClockConfig+0x130>)
 8000fee:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff0:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ff2:	d11c      	bne.n	800102e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff8:	d0a5      	beq.n	8000f46 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ffa:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ffc:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001000:	4e1a      	ldr	r6, [pc, #104]	; (800106c <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001002:	f022 0203 	bic.w	r2, r2, #3
 8001006:	430a      	orrs	r2, r1
 8001008:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800100a:	f7ff fad9 	bl	80005c0 <HAL_GetTick>
 800100e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001010:	68b3      	ldr	r3, [r6, #8]
 8001012:	6862      	ldr	r2, [r4, #4]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800101c:	d0a1      	beq.n	8000f62 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800101e:	f7ff facf 	bl	80005c0 <HAL_GetTick>
 8001022:	1bc0      	subs	r0, r0, r7
 8001024:	4540      	cmp	r0, r8
 8001026:	d9f3      	bls.n	8001010 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001028:	2003      	movs	r0, #3
}
 800102a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800102e:	2902      	cmp	r1, #2
 8001030:	d102      	bne.n	8001038 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001032:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001036:	e7df      	b.n	8000ff8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001038:	f012 0f02 	tst.w	r2, #2
 800103c:	e7dc      	b.n	8000ff8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800103e:	6813      	ldr	r3, [r2, #0]
 8001040:	f023 030f 	bic.w	r3, r3, #15
 8001044:	432b      	orrs	r3, r5
 8001046:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001048:	6813      	ldr	r3, [r2, #0]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	429d      	cmp	r5, r3
 8001050:	f47f af79 	bne.w	8000f46 <HAL_RCC_ClockConfig+0xa>
 8001054:	e78b      	b.n	8000f6e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001056:	4905      	ldr	r1, [pc, #20]	; (800106c <HAL_RCC_ClockConfig+0x130>)
 8001058:	68e0      	ldr	r0, [r4, #12]
 800105a:	688b      	ldr	r3, [r1, #8]
 800105c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001060:	4303      	orrs	r3, r0
 8001062:	608b      	str	r3, [r1, #8]
 8001064:	e786      	b.n	8000f74 <HAL_RCC_ClockConfig+0x38>
 8001066:	bf00      	nop
 8001068:	40023c00 	.word	0x40023c00
 800106c:	40023800 	.word	0x40023800
 8001070:	08002224 	.word	0x08002224
 8001074:	20000008 	.word	0x20000008

08001078 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001078:	4b01      	ldr	r3, [pc, #4]	; (8001080 <HAL_RCC_GetHCLKFreq+0x8>)
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008

08001084 <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001084:	6a03      	ldr	r3, [r0, #32]
{
 8001086:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001088:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800108a:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800108e:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8001092:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001094:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001096:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001098:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 800109c:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80010a0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80010a2:	6203      	str	r3, [r0, #32]
 80010a4:	bd10      	pop	{r4, pc}

080010a6 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010a6:	6a03      	ldr	r3, [r0, #32]
 80010a8:	f023 0310 	bic.w	r3, r3, #16
{
 80010ac:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010ae:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80010b0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80010b2:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80010b4:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80010b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 80010bc:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 80010c0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80010c4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80010c6:	6203      	str	r3, [r0, #32]
 80010c8:	bd10      	pop	{r4, pc}

080010ca <HAL_TIM_Encoder_Start>:
{
 80010ca:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 80010cc:	b189      	cbz	r1, 80010f2 <HAL_TIM_Encoder_Start+0x28>
 80010ce:	2904      	cmp	r1, #4
 80010d0:	d007      	beq.n	80010e2 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80010d2:	6a1a      	ldr	r2, [r3, #32]
 80010d4:	f022 0201 	bic.w	r2, r2, #1
 80010d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80010da:	6a1a      	ldr	r2, [r3, #32]
 80010dc:	f042 0201 	orr.w	r2, r2, #1
 80010e0:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 80010e2:	6a1a      	ldr	r2, [r3, #32]
 80010e4:	f022 0210 	bic.w	r2, r2, #16
 80010e8:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80010ea:	6a1a      	ldr	r2, [r3, #32]
 80010ec:	f042 0210 	orr.w	r2, r2, #16
 80010f0:	e006      	b.n	8001100 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 80010f2:	6a1a      	ldr	r2, [r3, #32]
 80010f4:	f022 0201 	bic.w	r2, r2, #1
 80010f8:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80010fa:	6a1a      	ldr	r2, [r3, #32]
 80010fc:	f042 0201 	orr.w	r2, r2, #1
 8001100:	621a      	str	r2, [r3, #32]
}
 8001102:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	4770      	bx	lr
	...

08001110 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001110:	4a30      	ldr	r2, [pc, #192]	; (80011d4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001112:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001114:	4290      	cmp	r0, r2
 8001116:	d012      	beq.n	800113e <TIM_Base_SetConfig+0x2e>
 8001118:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800111c:	d00f      	beq.n	800113e <TIM_Base_SetConfig+0x2e>
 800111e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001122:	4290      	cmp	r0, r2
 8001124:	d00b      	beq.n	800113e <TIM_Base_SetConfig+0x2e>
 8001126:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800112a:	4290      	cmp	r0, r2
 800112c:	d007      	beq.n	800113e <TIM_Base_SetConfig+0x2e>
 800112e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001132:	4290      	cmp	r0, r2
 8001134:	d003      	beq.n	800113e <TIM_Base_SetConfig+0x2e>
 8001136:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800113a:	4290      	cmp	r0, r2
 800113c:	d11d      	bne.n	800117a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800113e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001144:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001146:	4a23      	ldr	r2, [pc, #140]	; (80011d4 <TIM_Base_SetConfig+0xc4>)
 8001148:	4290      	cmp	r0, r2
 800114a:	d104      	bne.n	8001156 <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 800114c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001150:	68ca      	ldr	r2, [r1, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	e028      	b.n	80011a8 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001156:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800115a:	d0f7      	beq.n	800114c <TIM_Base_SetConfig+0x3c>
 800115c:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <TIM_Base_SetConfig+0xc8>)
 800115e:	4290      	cmp	r0, r2
 8001160:	d0f4      	beq.n	800114c <TIM_Base_SetConfig+0x3c>
 8001162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001166:	4290      	cmp	r0, r2
 8001168:	d0f0      	beq.n	800114c <TIM_Base_SetConfig+0x3c>
 800116a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800116e:	4290      	cmp	r0, r2
 8001170:	d0ec      	beq.n	800114c <TIM_Base_SetConfig+0x3c>
 8001172:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001176:	4290      	cmp	r0, r2
 8001178:	d0e8      	beq.n	800114c <TIM_Base_SetConfig+0x3c>
 800117a:	4a18      	ldr	r2, [pc, #96]	; (80011dc <TIM_Base_SetConfig+0xcc>)
 800117c:	4290      	cmp	r0, r2
 800117e:	d0e5      	beq.n	800114c <TIM_Base_SetConfig+0x3c>
 8001180:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001184:	4290      	cmp	r0, r2
 8001186:	d0e1      	beq.n	800114c <TIM_Base_SetConfig+0x3c>
 8001188:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800118c:	4290      	cmp	r0, r2
 800118e:	d0dd      	beq.n	800114c <TIM_Base_SetConfig+0x3c>
 8001190:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001194:	4290      	cmp	r0, r2
 8001196:	d0d9      	beq.n	800114c <TIM_Base_SetConfig+0x3c>
 8001198:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800119c:	4290      	cmp	r0, r2
 800119e:	d0d5      	beq.n	800114c <TIM_Base_SetConfig+0x3c>
 80011a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011a4:	4290      	cmp	r0, r2
 80011a6:	d0d1      	beq.n	800114c <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011a8:	694a      	ldr	r2, [r1, #20]
 80011aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011ae:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80011b0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011b2:	688b      	ldr	r3, [r1, #8]
 80011b4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80011b6:	680b      	ldr	r3, [r1, #0]
 80011b8:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <TIM_Base_SetConfig+0xc4>)
 80011bc:	4298      	cmp	r0, r3
 80011be:	d006      	beq.n	80011ce <TIM_Base_SetConfig+0xbe>
 80011c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011c4:	4298      	cmp	r0, r3
 80011c6:	d002      	beq.n	80011ce <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 80011c8:	2301      	movs	r3, #1
 80011ca:	6143      	str	r3, [r0, #20]
}
 80011cc:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80011ce:	690b      	ldr	r3, [r1, #16]
 80011d0:	6303      	str	r3, [r0, #48]	; 0x30
 80011d2:	e7f9      	b.n	80011c8 <TIM_Base_SetConfig+0xb8>
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40000400 	.word	0x40000400
 80011dc:	40014000 	.word	0x40014000

080011e0 <HAL_TIM_Base_Init>:
{ 
 80011e0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80011e2:	4604      	mov	r4, r0
 80011e4:	b1a0      	cbz	r0, 8001210 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80011e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80011ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011ee:	b91b      	cbnz	r3, 80011f8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80011f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80011f4:	f000 feb2 	bl	8001f5c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80011f8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80011fa:	6820      	ldr	r0, [r4, #0]
 80011fc:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 80011fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001202:	f7ff ff85 	bl	8001110 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001206:	2301      	movs	r3, #1
  return HAL_OK;
 8001208:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800120a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800120e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001210:	2001      	movs	r0, #1
}
 8001212:	bd10      	pop	{r4, pc}

08001214 <HAL_TIM_PWM_Init>:
{
 8001214:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001216:	4604      	mov	r4, r0
 8001218:	b1a0      	cbz	r0, 8001244 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800121a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800121e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001222:	b91b      	cbnz	r3, 800122c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001224:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001228:	f000 ff30 	bl	800208c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 800122c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800122e:	6820      	ldr	r0, [r4, #0]
 8001230:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 8001232:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001236:	f7ff ff6b 	bl	8001110 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800123a:	2301      	movs	r3, #1
  return HAL_OK;
 800123c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800123e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001242:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001244:	2001      	movs	r0, #1
}  
 8001246:	bd10      	pop	{r4, pc}

08001248 <HAL_TIM_Encoder_Init>:
{
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	460c      	mov	r4, r1
  if(htim == NULL)
 800124c:	4605      	mov	r5, r0
 800124e:	2800      	cmp	r0, #0
 8001250:	d043      	beq.n	80012da <HAL_TIM_Encoder_Init+0x92>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001252:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001256:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800125a:	b91b      	cbnz	r3, 8001264 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 800125c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8001260:	f000 fe90 	bl	8001f84 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001264:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 8001266:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001268:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 800126c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001270:	6883      	ldr	r3, [r0, #8]
 8001272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001276:	f023 0307 	bic.w	r3, r3, #7
 800127a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 800127c:	f7ff ff48 	bl	8001110 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001280:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001282:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001284:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001286:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 8001288:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 800128a:	431e      	orrs	r6, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800128c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 8001290:	69a3      	ldr	r3, [r4, #24]
  tmpccer = htim->Instance->CCER;
 8001292:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001294:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 8001298:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
 800129c:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 800129e:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80012a0:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80012a4:	6923      	ldr	r3, [r4, #16]
 80012a6:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80012a8:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80012ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80012b0:	68e1      	ldr	r1, [r4, #12]
 80012b2:	430b      	orrs	r3, r1
 80012b4:	6a21      	ldr	r1, [r4, #32]
 80012b6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 80012ba:	6961      	ldr	r1, [r4, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80012bc:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80012be:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 80012c2:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 80012c4:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 80012c6:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 80012ca:	6183      	str	r3, [r0, #24]
  htim->State= HAL_TIM_STATE_READY;
 80012cc:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 80012ce:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 80012d0:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 80012d2:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80012d4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 80012d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80012da:	2001      	movs	r0, #1
}
 80012dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080012e0 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012e0:	6a03      	ldr	r3, [r0, #32]
 80012e2:	f023 0301 	bic.w	r3, r3, #1
{
 80012e6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012e8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80012ea:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80012ec:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80012ee:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80012f0:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 80012f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80012f6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80012fa:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80012fe:	432c      	orrs	r4, r5
  tmpccer |= OC_Config->OCPolarity;
 8001300:	688d      	ldr	r5, [r1, #8]
 8001302:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001304:	4d0c      	ldr	r5, [pc, #48]	; (8001338 <TIM_OC1_SetConfig+0x58>)
 8001306:	42a8      	cmp	r0, r5
 8001308:	d009      	beq.n	800131e <TIM_OC1_SetConfig+0x3e>
 800130a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800130e:	42a8      	cmp	r0, r5
 8001310:	d005      	beq.n	800131e <TIM_OC1_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8001312:	6042      	str	r2, [r0, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8001314:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001316:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001318:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 800131a:	6203      	str	r3, [r0, #32]
} 
 800131c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 800131e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001320:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8001324:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001326:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 800132a:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800132c:	694d      	ldr	r5, [r1, #20]
 800132e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001330:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001334:	432a      	orrs	r2, r5
 8001336:	e7ec      	b.n	8001312 <TIM_OC1_SetConfig+0x32>
 8001338:	40010000 	.word	0x40010000

0800133c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800133c:	6a03      	ldr	r3, [r0, #32]
 800133e:	f023 0310 	bic.w	r3, r3, #16
{
 8001342:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001344:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001346:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001348:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800134a:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800134c:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001350:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001352:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8001356:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 800135a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 800135e:	688d      	ldr	r5, [r1, #8]
 8001360:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001364:	4d0d      	ldr	r5, [pc, #52]	; (800139c <TIM_OC2_SetConfig+0x60>)
 8001366:	42a8      	cmp	r0, r5
 8001368:	d009      	beq.n	800137e <TIM_OC2_SetConfig+0x42>
 800136a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800136e:	42a8      	cmp	r0, r5
 8001370:	d005      	beq.n	800137e <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8001372:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001374:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001376:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001378:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800137a:	6203      	str	r3, [r0, #32]
}
 800137c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800137e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001384:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001386:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800138a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800138e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001390:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001396:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800139a:	e7ea      	b.n	8001372 <TIM_OC2_SetConfig+0x36>
 800139c:	40010000 	.word	0x40010000

080013a0 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80013a0:	6a03      	ldr	r3, [r0, #32]
 80013a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 80013a6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80013a8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80013aa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80013ac:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80013ae:	69c4      	ldr	r4, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80013b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 80013b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80013b6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80013ba:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80013be:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 80013c0:	688d      	ldr	r5, [r1, #8]
 80013c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80013c6:	4d0e      	ldr	r5, [pc, #56]	; (8001400 <TIM_OC3_SetConfig+0x60>)
 80013c8:	42a8      	cmp	r0, r5
 80013ca:	d009      	beq.n	80013e0 <TIM_OC3_SetConfig+0x40>
 80013cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013d0:	42a8      	cmp	r0, r5
 80013d2:	d005      	beq.n	80013e0 <TIM_OC3_SetConfig+0x40>
  TIMx->CR2 = tmpcr2;
 80013d4:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 80013d6:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80013d8:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80013da:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80013dc:	6203      	str	r3, [r0, #32]
}
 80013de:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80013e0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80013e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80013e6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80013e8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80013ec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80013f0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80013f2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80013f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80013f8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80013fc:	e7ea      	b.n	80013d4 <TIM_OC3_SetConfig+0x34>
 80013fe:	bf00      	nop
 8001400:	40010000 	.word	0x40010000

08001404 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001404:	6a03      	ldr	r3, [r0, #32]
 8001406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800140a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800140c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800140e:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001410:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001412:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8001414:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001418:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800141a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800141e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001422:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001426:	688d      	ldr	r5, [r1, #8]
 8001428:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800142c:	4d09      	ldr	r5, [pc, #36]	; (8001454 <TIM_OC4_SetConfig+0x50>)
 800142e:	42a8      	cmp	r0, r5
 8001430:	d009      	beq.n	8001446 <TIM_OC4_SetConfig+0x42>
 8001432:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001436:	42a8      	cmp	r0, r5
 8001438:	d005      	beq.n	8001446 <TIM_OC4_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 800143a:	6042      	str	r2, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800143c:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800143e:	684b      	ldr	r3, [r1, #4]
 8001440:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001442:	6204      	str	r4, [r0, #32]
}
 8001444:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001446:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800144a:	694d      	ldr	r5, [r1, #20]
 800144c:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8001450:	e7f3      	b.n	800143a <TIM_OC4_SetConfig+0x36>
 8001452:	bf00      	nop
 8001454:	40010000 	.word	0x40010000

08001458 <TIM_ETR_SetConfig>:
{
 8001458:	b510      	push	{r4, lr}
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800145a:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 800145c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800145e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001462:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001466:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8001468:	6083      	str	r3, [r0, #8]
 800146a:	bd10      	pop	{r4, pc}

0800146c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800146c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001470:	2b01      	cmp	r3, #1
{
 8001472:	b510      	push	{r4, lr}
 8001474:	4604      	mov	r4, r0
 8001476:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800147a:	d018      	beq.n	80014ae <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 800147c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001480:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8001482:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001484:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001488:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <HAL_TIM_ConfigClockSource+0x118>)
 800148c:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800148e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001490:	680b      	ldr	r3, [r1, #0]
 8001492:	2b40      	cmp	r3, #64	; 0x40
 8001494:	d059      	beq.n	800154a <HAL_TIM_ConfigClockSource+0xde>
 8001496:	d815      	bhi.n	80014c4 <HAL_TIM_ConfigClockSource+0x58>
 8001498:	2b10      	cmp	r3, #16
 800149a:	d067      	beq.n	800156c <HAL_TIM_ConfigClockSource+0x100>
 800149c:	d808      	bhi.n	80014b0 <HAL_TIM_ConfigClockSource+0x44>
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d05e      	beq.n	8001560 <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 80014a2:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80014a4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80014a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80014aa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80014ae:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80014b0:	2b20      	cmp	r3, #32
 80014b2:	d061      	beq.n	8001578 <HAL_TIM_ConfigClockSource+0x10c>
 80014b4:	2b30      	cmp	r3, #48	; 0x30
 80014b6:	d1f4      	bne.n	80014a2 <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 80014b8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80014ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80014be:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 80014c2:	e026      	b.n	8001512 <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 80014c4:	2b70      	cmp	r3, #112	; 0x70
 80014c6:	d026      	beq.n	8001516 <HAL_TIM_ConfigClockSource+0xaa>
 80014c8:	d80e      	bhi.n	80014e8 <HAL_TIM_ConfigClockSource+0x7c>
 80014ca:	2b50      	cmp	r3, #80	; 0x50
 80014cc:	d032      	beq.n	8001534 <HAL_TIM_ConfigClockSource+0xc8>
 80014ce:	2b60      	cmp	r3, #96	; 0x60
 80014d0:	d1e7      	bne.n	80014a2 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80014d2:	68ca      	ldr	r2, [r1, #12]
 80014d4:	6849      	ldr	r1, [r1, #4]
 80014d6:	f7ff fde6 	bl	80010a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80014da:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80014dc:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80014de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80014e2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80014e6:	e023      	b.n	8001530 <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 80014e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ec:	d00c      	beq.n	8001508 <HAL_TIM_ConfigClockSource+0x9c>
 80014ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014f2:	d1d6      	bne.n	80014a2 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 80014f4:	68cb      	ldr	r3, [r1, #12]
 80014f6:	684a      	ldr	r2, [r1, #4]
 80014f8:	6889      	ldr	r1, [r1, #8]
 80014fa:	f7ff ffad 	bl	8001458 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80014fe:	6822      	ldr	r2, [r4, #0]
 8001500:	6893      	ldr	r3, [r2, #8]
 8001502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001506:	e013      	b.n	8001530 <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001508:	6883      	ldr	r3, [r0, #8]
 800150a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150e:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001512:	6083      	str	r3, [r0, #8]
 8001514:	e7c5      	b.n	80014a2 <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 8001516:	68cb      	ldr	r3, [r1, #12]
 8001518:	684a      	ldr	r2, [r1, #4]
 800151a:	6889      	ldr	r1, [r1, #8]
 800151c:	f7ff ff9c 	bl	8001458 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001520:	6822      	ldr	r2, [r4, #0]
 8001522:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001528:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800152c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001530:	6093      	str	r3, [r2, #8]
    break;
 8001532:	e7b6      	b.n	80014a2 <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001534:	68ca      	ldr	r2, [r1, #12]
 8001536:	6849      	ldr	r1, [r1, #4]
 8001538:	f7ff fda4 	bl	8001084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800153c:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 800153e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001544:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001548:	e7f2      	b.n	8001530 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800154a:	68ca      	ldr	r2, [r1, #12]
 800154c:	6849      	ldr	r1, [r1, #4]
 800154e:	f7ff fd99 	bl	8001084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001552:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8001554:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800155a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800155e:	e7e7      	b.n	8001530 <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 8001560:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001566:	f043 0307 	orr.w	r3, r3, #7
 800156a:	e7d2      	b.n	8001512 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 800156c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800156e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001572:	f043 0317 	orr.w	r3, r3, #23
 8001576:	e7cc      	b.n	8001512 <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 8001578:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800157a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800157e:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001582:	e7c6      	b.n	8001512 <HAL_TIM_ConfigClockSource+0xa6>
 8001584:	fffe0088 	.word	0xfffe0088

08001588 <TIM_CCxChannelCmd>:
{
 8001588:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 800158a:	2401      	movs	r4, #1
  TIMx->CCER &= ~tmp;
 800158c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800158e:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << Channel;
 8001590:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001592:	ea23 0304 	bic.w	r3, r3, r4
 8001596:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001598:	6a03      	ldr	r3, [r0, #32]
 800159a:	431a      	orrs	r2, r3
 800159c:	6202      	str	r2, [r0, #32]
 800159e:	bd10      	pop	{r4, pc}

080015a0 <HAL_TIM_PWM_Start>:
{
 80015a0:	b510      	push	{r4, lr}
 80015a2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80015a4:	2201      	movs	r2, #1
 80015a6:	6800      	ldr	r0, [r0, #0]
 80015a8:	f7ff ffee 	bl	8001588 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80015ac:	6823      	ldr	r3, [r4, #0]
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_TIM_PWM_Start+0x30>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d003      	beq.n	80015bc <HAL_TIM_PWM_Start+0x1c>
 80015b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d103      	bne.n	80015c4 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80015bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015c2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80015c4:	681a      	ldr	r2, [r3, #0]
} 
 80015c6:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80015c8:	f042 0201 	orr.w	r2, r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
} 
 80015ce:	bd10      	pop	{r4, pc}
 80015d0:	40010000 	.word	0x40010000

080015d4 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80015d4:	6a03      	ldr	r3, [r0, #32]
 80015d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 80015da:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80015dc:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015de:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80015e0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80015e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80015e4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 80015e8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80015ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80015f2:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80015f4:	688d      	ldr	r5, [r1, #8]
 80015f6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80015fa:	4d09      	ldr	r5, [pc, #36]	; (8001620 <TIM_OC5_SetConfig+0x4c>)
 80015fc:	42a8      	cmp	r0, r5
 80015fe:	d003      	beq.n	8001608 <TIM_OC5_SetConfig+0x34>
 8001600:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001604:	42a8      	cmp	r0, r5
 8001606:	d104      	bne.n	8001612 <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001608:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800160c:	694d      	ldr	r5, [r1, #20]
 800160e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001612:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001614:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001616:	684b      	ldr	r3, [r1, #4]
 8001618:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800161a:	6202      	str	r2, [r0, #32]
 800161c:	bd30      	pop	{r4, r5, pc}
 800161e:	bf00      	nop
 8001620:	40010000 	.word	0x40010000

08001624 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001624:	6a03      	ldr	r3, [r0, #32]
 8001626:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800162a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800162c:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800162e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001630:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001632:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001634:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001638:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800163a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800163e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001642:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8001646:	688d      	ldr	r5, [r1, #8]
 8001648:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800164c:	4d08      	ldr	r5, [pc, #32]	; (8001670 <TIM_OC6_SetConfig+0x4c>)
 800164e:	42a8      	cmp	r0, r5
 8001650:	d003      	beq.n	800165a <TIM_OC6_SetConfig+0x36>
 8001652:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001656:	42a8      	cmp	r0, r5
 8001658:	d104      	bne.n	8001664 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800165a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800165e:	694d      	ldr	r5, [r1, #20]
 8001660:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001664:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001666:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001668:	684b      	ldr	r3, [r1, #4]
 800166a:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800166c:	6202      	str	r2, [r0, #32]
 800166e:	bd30      	pop	{r4, r5, pc}
 8001670:	40010000 	.word	0x40010000

08001674 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8001674:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001678:	2b01      	cmp	r3, #1
{
 800167a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800167c:	d01c      	beq.n	80016b8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 800167e:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001680:	4d0e      	ldr	r5, [pc, #56]	; (80016bc <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8001682:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001684:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8001686:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001688:	d003      	beq.n	8001692 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800168a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800168e:	42aa      	cmp	r2, r5
 8001690:	d103      	bne.n	800169a <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001692:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001696:	684d      	ldr	r5, [r1, #4]
 8001698:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800169a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800169c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80016a0:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80016a2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80016a6:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80016a8:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 80016aa:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 80016ac:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80016ae:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80016b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80016b4:	4618      	mov	r0, r3
 80016b6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80016b8:	2002      	movs	r0, #2
} 
 80016ba:	bd30      	pop	{r4, r5, pc}
 80016bc:	40010000 	.word	0x40010000

080016c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80016c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80016c4:	2b01      	cmp	r3, #1
{
 80016c6:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80016c8:	d038      	beq.n	800173c <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80016ca:	68cb      	ldr	r3, [r1, #12]
 80016cc:	688a      	ldr	r2, [r1, #8]
 80016ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80016d2:	4c1b      	ldr	r4, [pc, #108]	; (8001740 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80016d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80016d6:	684a      	ldr	r2, [r1, #4]
 80016d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80016de:	680a      	ldr	r2, [r1, #0]
 80016e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80016e6:	690a      	ldr	r2, [r1, #16]
 80016e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80016ee:	694a      	ldr	r2, [r1, #20]
 80016f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80016f6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80016f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80016fe:	698a      	ldr	r2, [r1, #24]
 8001700:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001704:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001708:	6802      	ldr	r2, [r0, #0]
 800170a:	42a2      	cmp	r2, r4
 800170c:	d003      	beq.n	8001716 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800170e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001712:	42a2      	cmp	r2, r4
 8001714:	d10c      	bne.n	8001730 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8001716:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8001718:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800171c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001720:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001722:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001728:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800172a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800172e:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8001730:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8001732:	2300      	movs	r3, #0
 8001734:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001738:	4618      	mov	r0, r3
 800173a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800173c:	2002      	movs	r0, #2
}
 800173e:	bd10      	pop	{r4, pc}
 8001740:	40010000 	.word	0x40010000

08001744 <HAL_TIM_PWM_ConfigChannel>:
{
 8001744:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001746:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800174a:	4604      	mov	r4, r0
 800174c:	460d      	mov	r5, r1
 800174e:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001750:	2b01      	cmp	r3, #1
 8001752:	d010      	beq.n	8001776 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001754:	2301      	movs	r3, #1
  switch (Channel)
 8001756:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 8001758:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800175c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001760:	d043      	beq.n	80017ea <HAL_TIM_PWM_ConfigChannel+0xa6>
 8001762:	d809      	bhi.n	8001778 <HAL_TIM_PWM_ConfigChannel+0x34>
 8001764:	b1fa      	cbz	r2, 80017a6 <HAL_TIM_PWM_ConfigChannel+0x62>
 8001766:	2a04      	cmp	r2, #4
 8001768:	d02e      	beq.n	80017c8 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800176a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800176c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800176e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001772:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001776:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8001778:	2a10      	cmp	r2, #16
 800177a:	d047      	beq.n	800180c <HAL_TIM_PWM_ConfigChannel+0xc8>
 800177c:	2a14      	cmp	r2, #20
 800177e:	d056      	beq.n	800182e <HAL_TIM_PWM_ConfigChannel+0xea>
 8001780:	2a0c      	cmp	r2, #12
 8001782:	d1f2      	bne.n	800176a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001784:	6820      	ldr	r0, [r4, #0]
 8001786:	f7ff fe3d 	bl	8001404 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800178a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800178c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800178e:	69da      	ldr	r2, [r3, #28]
 8001790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001796:	69da      	ldr	r2, [r3, #28]
 8001798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800179c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800179e:	69da      	ldr	r2, [r3, #28]
 80017a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80017a4:	e030      	b.n	8001808 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80017a6:	6820      	ldr	r0, [r4, #0]
 80017a8:	f7ff fd9a 	bl	80012e0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017ac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80017ae:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017b0:	699a      	ldr	r2, [r3, #24]
 80017b2:	f042 0208 	orr.w	r2, r2, #8
 80017b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	f022 0204 	bic.w	r2, r2, #4
 80017be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80017c4:	619a      	str	r2, [r3, #24]
    break;
 80017c6:	e7d0      	b.n	800176a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80017c8:	6820      	ldr	r0, [r4, #0]
 80017ca:	f7ff fdb7 	bl	800133c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80017ce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80017d0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80017d2:	699a      	ldr	r2, [r3, #24]
 80017d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80017da:	699a      	ldr	r2, [r3, #24]
 80017dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80017e2:	699a      	ldr	r2, [r3, #24]
 80017e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80017e8:	e7ec      	b.n	80017c4 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80017ea:	6820      	ldr	r0, [r4, #0]
 80017ec:	f7ff fdd8 	bl	80013a0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80017f0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80017f2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80017f4:	69da      	ldr	r2, [r3, #28]
 80017f6:	f042 0208 	orr.w	r2, r2, #8
 80017fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	f022 0204 	bic.w	r2, r2, #4
 8001802:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8001808:	61da      	str	r2, [r3, #28]
    break;
 800180a:	e7ae      	b.n	800176a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800180c:	6820      	ldr	r0, [r4, #0]
 800180e:	f7ff fee1 	bl	80015d4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001812:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001814:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001816:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001818:	f042 0208 	orr.w	r2, r2, #8
 800181c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800181e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001820:	f022 0204 	bic.w	r2, r2, #4
 8001824:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001826:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001828:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800182a:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 800182c:	e79d      	b.n	800176a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800182e:	6820      	ldr	r0, [r4, #0]
 8001830:	f7ff fef8 	bl	8001624 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001834:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8001836:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800183a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800183e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8001848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800184a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800184e:	e7ec      	b.n	800182a <HAL_TIM_PWM_ConfigChannel+0xe6>

08001850 <run>:
	LEFT,
	RIGHT
} side;

void run(int32_t speed_right, int32_t speed_left)
{
 8001850:	b570      	push	{r4, r5, r6, lr}
	//GESTION moteur DROIT
	if(speed_right>0 )
 8001852:	1e04      	subs	r4, r0, #0
{
 8001854:	460d      	mov	r5, r1
 8001856:	4e32      	ldr	r6, [pc, #200]	; (8001920 <run+0xd0>)
	if(speed_right>0 )
 8001858:	dd21      	ble.n	800189e <run+0x4e>
	{
		if(speed_right > 100){
			speed_right = 100;
		}
		//moteur allume DROIT avant
		HAL_GPIO_WritePin(RIGHT_DIR1_GPIO_Port,RIGHT_DIR1_Pin,GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2104      	movs	r1, #4
 800185e:	4831      	ldr	r0, [pc, #196]	; (8001924 <run+0xd4>)
 8001860:	f7ff f96c 	bl	8000b3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_DIR2_GPIO_Port,RIGHT_DIR2_Pin,GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	2102      	movs	r1, #2
 8001868:	482e      	ldr	r0, [pc, #184]	; (8001924 <run+0xd4>)
 800186a:	f7ff f967 	bl	8000b3c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed_right);
 800186e:	2c64      	cmp	r4, #100	; 0x64
 8001870:	6833      	ldr	r3, [r6, #0]
 8001872:	bfa8      	it	ge
 8001874:	2464      	movge	r4, #100	; 0x64
		//HAL_GPIO_WritePin(RIGHT_PWM_GPIO_Port,RIGHT_PWM_Pin,GPIO_PIN_SET); //GPIO

	}

	//GESTION moteur GAUCHE
	if(speed_left>0 )
 8001876:	2d00      	cmp	r5, #0
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001878:	639c      	str	r4, [r3, #56]	; 0x38
	if(speed_left>0 )
 800187a:	dd2f      	ble.n	80018dc <run+0x8c>
	{
		if(speed_left > 100){
			speed_left = 100;
		}
		//moteur allume GAUCHE avant
		HAL_GPIO_WritePin(LEFT_DIR1_GPIO_Port,LEFT_DIR1_Pin,GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	4829      	ldr	r0, [pc, #164]	; (8001928 <run+0xd8>)
 8001882:	f7ff f95b 	bl	8000b3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_DIR2_GPIO_Port,LEFT_DIR2_Pin,GPIO_PIN_SET);
 8001886:	2201      	movs	r2, #1
 8001888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800188c:	4826      	ldr	r0, [pc, #152]	; (8001928 <run+0xd8>)
 800188e:	f7ff f955 	bl	8000b3c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed_left);
 8001892:	2d64      	cmp	r5, #100	; 0x64
 8001894:	6833      	ldr	r3, [r6, #0]
 8001896:	bfa8      	it	ge
 8001898:	2564      	movge	r5, #100	; 0x64
	else if(speed_left==0)
	{
		//moteur eteint
		HAL_GPIO_WritePin(LEFT_DIR1_GPIO_Port,LEFT_DIR1_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LEFT_DIR2_GPIO_Port,LEFT_DIR2_Pin,GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800189a:	635d      	str	r5, [r3, #52]	; 0x34
 800189c:	bd70      	pop	{r4, r5, r6, pc}
	else if(speed_right<0)
 800189e:	d011      	beq.n	80018c4 <run+0x74>
		HAL_GPIO_WritePin(RIGHT_DIR1_GPIO_Port,RIGHT_DIR1_Pin,GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2104      	movs	r1, #4
 80018a4:	481f      	ldr	r0, [pc, #124]	; (8001924 <run+0xd4>)
 80018a6:	f7ff f949 	bl	8000b3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_DIR2_GPIO_Port,RIGHT_DIR2_Pin,GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2102      	movs	r1, #2
 80018ae:	481d      	ldr	r0, [pc, #116]	; (8001924 <run+0xd4>)
 80018b0:	f7ff f944 	bl	8000b3c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,(-speed_right));
 80018b4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80018b8:	6833      	ldr	r3, [r6, #0]
 80018ba:	4294      	cmp	r4, r2
 80018bc:	bfb8      	it	lt
 80018be:	4614      	movlt	r4, r2
 80018c0:	4264      	negs	r4, r4
 80018c2:	e7d8      	b.n	8001876 <run+0x26>
		HAL_GPIO_WritePin(RIGHT_DIR1_GPIO_Port,RIGHT_DIR1_Pin,GPIO_PIN_RESET);
 80018c4:	4622      	mov	r2, r4
 80018c6:	2104      	movs	r1, #4
 80018c8:	4816      	ldr	r0, [pc, #88]	; (8001924 <run+0xd4>)
 80018ca:	f7ff f937 	bl	8000b3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_DIR2_GPIO_Port,RIGHT_DIR2_Pin,GPIO_PIN_RESET);
 80018ce:	4622      	mov	r2, r4
 80018d0:	2102      	movs	r1, #2
 80018d2:	4814      	ldr	r0, [pc, #80]	; (8001924 <run+0xd4>)
 80018d4:	f7ff f932 	bl	8000b3c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80018d8:	6833      	ldr	r3, [r6, #0]
 80018da:	e7cc      	b.n	8001876 <run+0x26>
	else if(speed_left<0)
 80018dc:	d013      	beq.n	8001906 <run+0xb6>
		HAL_GPIO_WritePin(LEFT_DIR1_GPIO_Port,LEFT_DIR1_Pin,GPIO_PIN_SET);
 80018de:	2201      	movs	r2, #1
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	4811      	ldr	r0, [pc, #68]	; (8001928 <run+0xd8>)
 80018e4:	f7ff f92a 	bl	8000b3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_DIR2_GPIO_Port,LEFT_DIR2_Pin,GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ee:	480e      	ldr	r0, [pc, #56]	; (8001928 <run+0xd8>)
 80018f0:	f7ff f924 	bl	8000b3c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,(-speed_left));
 80018f4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80018f8:	6832      	ldr	r2, [r6, #0]
 80018fa:	429d      	cmp	r5, r3
 80018fc:	bfb8      	it	lt
 80018fe:	461d      	movlt	r5, r3
 8001900:	426d      	negs	r5, r5
 8001902:	6355      	str	r5, [r2, #52]	; 0x34
 8001904:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(LEFT_DIR1_GPIO_Port,LEFT_DIR1_Pin,GPIO_PIN_RESET);
 8001906:	462a      	mov	r2, r5
 8001908:	2180      	movs	r1, #128	; 0x80
 800190a:	4807      	ldr	r0, [pc, #28]	; (8001928 <run+0xd8>)
 800190c:	f7ff f916 	bl	8000b3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_DIR2_GPIO_Port,LEFT_DIR2_Pin,GPIO_PIN_RESET);
 8001910:	462a      	mov	r2, r5
 8001912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001916:	4804      	ldr	r0, [pc, #16]	; (8001928 <run+0xd8>)
 8001918:	f7ff f910 	bl	8000b3c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800191c:	6833      	ldr	r3, [r6, #0]
 800191e:	e7bc      	b.n	800189a <run+0x4a>
 8001920:	20000138 	.word	0x20000138
 8001924:	40020400 	.word	0x40020400
 8001928:	40021000 	.word	0x40021000

0800192c <init_avance>:
*/
enum state {ETAT1_ACC,ETAT2_CST,ETAT3_DEC, FIN};
enum state current_state;
void init_avance()
{
	current_state = ETAT1_ACC;
 800192c:	2200      	movs	r2, #0
 800192e:	4b01      	ldr	r3, [pc, #4]	; (8001934 <init_avance+0x8>)
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	4770      	bx	lr
 8001934:	2000002c 	.word	0x2000002c

08001938 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001938:	4b28      	ldr	r3, [pc, #160]	; (80019dc <SystemClock_Config+0xa4>)
 800193a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800193c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8001940:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	641a      	str	r2, [r3, #64]	; 0x40
{
 8001944:	b094      	sub	sp, #80	; 0x50
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001948:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194a:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <SystemClock_Config+0xa8>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001960:	9407      	str	r4, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001962:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001966:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001968:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800196e:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001970:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001972:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001974:	2310      	movs	r3, #16
 8001976:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001978:	2300      	movs	r3, #0
 800197a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800197c:	2308      	movs	r3, #8
 800197e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001980:	23d8      	movs	r3, #216	; 0xd8
 8001982:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001984:	f7ff f918 	bl	8000bb8 <HAL_RCC_OscConfig>
 8001988:	b100      	cbz	r0, 800198c <SystemClock_Config+0x54>
 800198a:	e7fe      	b.n	800198a <SystemClock_Config+0x52>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800198c:	f7ff f8dc 	bl	8000b48 <HAL_PWREx_EnableOverDrive>
 8001990:	b100      	cbz	r0, 8001994 <SystemClock_Config+0x5c>
 8001992:	e7fe      	b.n	8001992 <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001994:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001996:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001998:	2107      	movs	r1, #7
 800199a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800199e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019a4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019aa:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80019ac:	f7ff fac6 	bl	8000f3c <HAL_RCC_ClockConfig>
 80019b0:	4604      	mov	r4, r0
 80019b2:	b100      	cbz	r0, 80019b6 <SystemClock_Config+0x7e>
 80019b4:	e7fe      	b.n	80019b4 <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80019b6:	f7ff fb5f 	bl	8001078 <HAL_RCC_GetHCLKFreq>
 80019ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019be:	fbb0 f0f3 	udiv	r0, r0, r3
 80019c2:	f7fe ffa3 	bl	800090c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80019c6:	2004      	movs	r0, #4
 80019c8:	f7fe ffb6 	bl	8000938 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80019cc:	4622      	mov	r2, r4
 80019ce:	4621      	mov	r1, r4
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f7fe ff62 	bl	800089c <HAL_NVIC_SetPriority>
}
 80019d8:	b014      	add	sp, #80	; 0x50
 80019da:	bd10      	pop	{r4, pc}
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40007000 	.word	0x40007000

080019e4 <main>:
{
 80019e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019e8:	b09e      	sub	sp, #120	; 0x78
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2500      	movs	r5, #0
  HAL_Init();
 80019ec:	f7fe fdd0 	bl	8000590 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019f0:	2411      	movs	r4, #17
  SystemClock_Config();
 80019f2:	f7ff ffa1 	bl	8001938 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019f6:	4b9a      	ldr	r3, [pc, #616]	; (8001c60 <main+0x27c>)
  HAL_GPIO_WritePin(GPIOE, LED2_Pin|LEFT_DIR1_Pin|LEFT_DIR2_Pin, GPIO_PIN_RESET);
 80019f8:	f44f 71c2 	mov.w	r1, #388	; 0x184
 80019fc:	4899      	ldr	r0, [pc, #612]	; (8001c64 <main+0x280>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = LED2_Pin;
 8001a00:	2704      	movs	r7, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : IR_LED_DR_Pin IR_LED_DL_Pin IR_LED_FR_Pin IR_LED_FL_Pin */
  GPIO_InitStruct.Pin = IR_LED_DR_Pin|IR_LED_DL_Pin|IR_LED_FR_Pin|IR_LED_FL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a04:	f042 0210 	orr.w	r2, r2, #16
 8001a08:	631a      	str	r2, [r3, #48]	; 0x30
 8001a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a0c:	f002 0210 	and.w	r2, r2, #16
 8001a10:	9200      	str	r2, [sp, #0]
 8001a12:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a16:	f042 0204 	orr.w	r2, r2, #4
 8001a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a1e:	f002 0204 	and.w	r2, r2, #4
 8001a22:	9201      	str	r2, [sp, #4]
 8001a24:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a28:	f042 0201 	orr.w	r2, r2, #1
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a30:	f002 0201 	and.w	r2, r2, #1
 8001a34:	9202      	str	r2, [sp, #8]
 8001a36:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a3a:	f042 0202 	orr.w	r2, r2, #2
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a42:	f002 0202 	and.w	r2, r2, #2
 8001a46:	9203      	str	r2, [sp, #12]
 8001a48:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a4c:	f042 0208 	orr.w	r2, r2, #8
 8001a50:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, LED2_Pin|LEFT_DIR1_Pin|LEFT_DIR2_Pin, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	9304      	str	r3, [sp, #16]
 8001a5c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, LED2_Pin|LEFT_DIR1_Pin|LEFT_DIR2_Pin, GPIO_PIN_RESET);
 8001a5e:	f7ff f86d 	bl	8000b3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, IR_LED_DR_Pin|IR_LED_DL_Pin|IR_LED_FR_Pin|IR_LED_FL_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	210f      	movs	r1, #15
 8001a66:	4880      	ldr	r0, [pc, #512]	; (8001c68 <main+0x284>)
 8001a68:	f7ff f868 	bl	8000b3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RIGHT_DIR2_Pin|RIGHT_DIR1_Pin, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2106      	movs	r1, #6
 8001a70:	487e      	ldr	r0, [pc, #504]	; (8001c6c <main+0x288>)
 8001a72:	f7ff f863 	bl	8000b3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2108      	movs	r1, #8
 8001a7a:	487d      	ldr	r0, [pc, #500]	; (8001c70 <main+0x28c>)
 8001a7c:	f7ff f85e 	bl	8000b3c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001a80:	a913      	add	r1, sp, #76	; 0x4c
 8001a82:	4878      	ldr	r0, [pc, #480]	; (8001c64 <main+0x280>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a84:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = LED2_Pin;
 8001a86:	9713      	str	r7, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	9516      	str	r5, [sp, #88]	; 0x58
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f7fe ff66 	bl	800095c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IR_LED_DR_Pin|IR_LED_DL_Pin|IR_LED_FR_Pin|IR_LED_FL_Pin;
 8001a90:	230f      	movs	r3, #15
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a92:	a913      	add	r1, sp, #76	; 0x4c
 8001a94:	4874      	ldr	r0, [pc, #464]	; (8001c68 <main+0x284>)
  GPIO_InitStruct.Pin = IR_LED_DR_Pin|IR_LED_DL_Pin|IR_LED_FR_Pin|IR_LED_FL_Pin;
 8001a96:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a98:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	9516      	str	r5, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9e:	f7fe ff5d 	bl	800095c <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_DIR2_Pin RIGHT_DIR1_Pin */
  GPIO_InitStruct.Pin = RIGHT_DIR2_Pin|RIGHT_DIR1_Pin;
 8001aa2:	2306      	movs	r3, #6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa4:	a913      	add	r1, sp, #76	; 0x4c
 8001aa6:	4871      	ldr	r0, [pc, #452]	; (8001c6c <main+0x288>)
  GPIO_InitStruct.Pin = RIGHT_DIR2_Pin|RIGHT_DIR1_Pin;
 8001aa8:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	9516      	str	r5, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f7fe ff54 	bl	800095c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_DIR1_Pin LEFT_DIR2_Pin */
  GPIO_InitStruct.Pin = LEFT_DIR1_Pin|LEFT_DIR2_Pin;
 8001ab4:	f44f 73c0 	mov.w	r3, #384	; 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab8:	a913      	add	r1, sp, #76	; 0x4c
 8001aba:	486a      	ldr	r0, [pc, #424]	; (8001c64 <main+0x280>)
  GPIO_InitStruct.Pin = LEFT_DIR1_Pin|LEFT_DIR2_Pin;
 8001abc:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abe:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	9516      	str	r5, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac4:	f7fe ff4a 	bl	800095c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON1_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON1_Pin|BUTTON3_Pin;
 8001ac8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001acc:	a913      	add	r1, sp, #76	; 0x4c
 8001ace:	4868      	ldr	r0, [pc, #416]	; (8001c70 <main+0x28c>)
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON1_Pin|BUTTON3_Pin;
 8001ad0:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad2:	9514      	str	r5, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad4:	9615      	str	r6, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad6:	f7fe ff41 	bl	800095c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001ada:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001adc:	a913      	add	r1, sp, #76	; 0x4c
 8001ade:	4864      	ldr	r0, [pc, #400]	; (8001c70 <main+0x28c>)
  GPIO_InitStruct.Pin = LED1_Pin;
 8001ae0:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ae2:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	9515      	str	r5, [sp, #84]	; 0x54
  htim1.Instance = TIM1;
 8001ae6:	4c63      	ldr	r4, [pc, #396]	; (8001c74 <main+0x290>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	9516      	str	r5, [sp, #88]	; 0x58
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f7fe ff37 	bl	800095c <HAL_GPIO_Init>
  htim1.Init.Prescaler = 107;
 8001aee:	236b      	movs	r3, #107	; 0x6b
 8001af0:	4961      	ldr	r1, [pc, #388]	; (8001c78 <main+0x294>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001af2:	4620      	mov	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af4:	60a5      	str	r5, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af6:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af8:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afa:	61a5      	str	r5, [r4, #24]
  htim1.Init.Prescaler = 107;
 8001afc:	e884 000a 	stmia.w	r4, {r1, r3}
  htim1.Init.Period = 100;
 8001b00:	2364      	movs	r3, #100	; 0x64
 8001b02:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b04:	f7ff fb6c 	bl	80011e0 <HAL_TIM_Base_Init>
 8001b08:	b100      	cbz	r0, 8001b0c <main+0x128>
 8001b0a:	e7fe      	b.n	8001b0a <main+0x126>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0c:	a91e      	add	r1, sp, #120	; 0x78
 8001b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b12:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b14:	f841 3d58 	str.w	r3, [r1, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b18:	f7ff fca8 	bl	800146c <HAL_TIM_ConfigClockSource>
 8001b1c:	b100      	cbz	r0, 8001b20 <main+0x13c>
 8001b1e:	e7fe      	b.n	8001b1e <main+0x13a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b20:	4620      	mov	r0, r4
 8001b22:	f7ff fb77 	bl	8001214 <HAL_TIM_PWM_Init>
 8001b26:	b100      	cbz	r0, 8001b2a <main+0x146>
 8001b28:	e7fe      	b.n	8001b28 <main+0x144>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2a:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b2c:	a905      	add	r1, sp, #20
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b2e:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b30:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7ff fd9e 	bl	8001674 <HAL_TIMEx_MasterConfigSynchronization>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	b100      	cbz	r0, 8001b3e <main+0x15a>
 8001b3c:	e7fe      	b.n	8001b3c <main+0x158>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b3e:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8001b40:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b42:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b44:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b46:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b48:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b4a:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b4c:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b4e:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b50:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b52:	f7ff fdf7 	bl	8001744 <HAL_TIM_PWM_ConfigChannel>
 8001b56:	b100      	cbz	r0, 8001b5a <main+0x176>
 8001b58:	e7fe      	b.n	8001b58 <main+0x174>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b5a:	463a      	mov	r2, r7
 8001b5c:	a90c      	add	r1, sp, #48	; 0x30
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff fdf0 	bl	8001744 <HAL_TIM_PWM_ConfigChannel>
 8001b64:	b100      	cbz	r0, 8001b68 <main+0x184>
 8001b66:	e7fe      	b.n	8001b66 <main+0x182>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b6c:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b6e:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b70:	a913      	add	r1, sp, #76	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b72:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b78:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b7a:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b7c:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b7e:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b80:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b82:	901c      	str	r0, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b84:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b86:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b88:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b8a:	f7ff fd99 	bl	80016c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b8e:	4605      	mov	r5, r0
 8001b90:	b100      	cbz	r0, 8001b94 <main+0x1b0>
 8001b92:	e7fe      	b.n	8001b92 <main+0x1ae>
  HAL_TIM_MspPostInit(&htim1);
 8001b94:	4620      	mov	r0, r4
  htim4.Instance = TIM4;
 8001b96:	4c39      	ldr	r4, [pc, #228]	; (8001c7c <main+0x298>)
  HAL_TIM_MspPostInit(&htim1);
 8001b98:	f000 fa8c 	bl	80020b4 <HAL_TIM_MspPostInit>
  htim4.Init.Period = 0xFFFF;
 8001b9c:	f64f 78ff 	movw	r8, #65535	; 0xffff
  htim4.Instance = TIM4;
 8001ba0:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <main+0x29c>)
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ba2:	2703      	movs	r7, #3
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ba4:	a913      	add	r1, sp, #76	; 0x4c
 8001ba6:	4620      	mov	r0, r4
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	60a5      	str	r5, [r4, #8]
  htim4.Init.Period = 0xFFFF;
 8001baa:	f8c4 800c 	str.w	r8, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bae:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb0:	61a5      	str	r5, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bb2:	9713      	str	r7, [sp, #76]	; 0x4c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bb4:	9514      	str	r5, [sp, #80]	; 0x50
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bb6:	9615      	str	r6, [sp, #84]	; 0x54
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bb8:	9516      	str	r5, [sp, #88]	; 0x58
  sConfig.IC1Filter = 0;
 8001bba:	9517      	str	r5, [sp, #92]	; 0x5c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bbc:	9518      	str	r5, [sp, #96]	; 0x60
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bbe:	9619      	str	r6, [sp, #100]	; 0x64
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bc0:	951a      	str	r5, [sp, #104]	; 0x68
  sConfig.IC2Filter = 0;
 8001bc2:	951b      	str	r5, [sp, #108]	; 0x6c
  htim4.Init.Prescaler = 0;
 8001bc4:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001bc8:	f7ff fb3e 	bl	8001248 <HAL_TIM_Encoder_Init>
 8001bcc:	b100      	cbz	r0, 8001bd0 <main+0x1ec>
 8001bce:	e7fe      	b.n	8001bce <main+0x1ea>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd0:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bd2:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd4:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f7ff fd4c 	bl	8001674 <HAL_TIMEx_MasterConfigSynchronization>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	b100      	cbz	r0, 8001be2 <main+0x1fe>
 8001be0:	e7fe      	b.n	8001be0 <main+0x1fc>
  htim3.Instance = TIM3;
 8001be2:	4828      	ldr	r0, [pc, #160]	; (8001c84 <main+0x2a0>)
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001be4:	a913      	add	r1, sp, #76	; 0x4c
  htim3.Instance = TIM3;
 8001be6:	4a28      	ldr	r2, [pc, #160]	; (8001c88 <main+0x2a4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 0xFFFF;
 8001bea:	f8c0 800c 	str.w	r8, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bee:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf0:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bf2:	9713      	str	r7, [sp, #76]	; 0x4c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bf4:	9314      	str	r3, [sp, #80]	; 0x50
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bf6:	9615      	str	r6, [sp, #84]	; 0x54
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bf8:	9316      	str	r3, [sp, #88]	; 0x58
  sConfig.IC1Filter = 0;
 8001bfa:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bfc:	9318      	str	r3, [sp, #96]	; 0x60
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bfe:	9619      	str	r6, [sp, #100]	; 0x64
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c00:	931a      	str	r3, [sp, #104]	; 0x68
  sConfig.IC2Filter = 0;
 8001c02:	931b      	str	r3, [sp, #108]	; 0x6c
  htim3.Init.Prescaler = 0;
 8001c04:	e880 000c 	stmia.w	r0, {r2, r3}
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c08:	f7ff fb1e 	bl	8001248 <HAL_TIM_Encoder_Init>
 8001c0c:	b100      	cbz	r0, 8001c10 <main+0x22c>
 8001c0e:	e7fe      	b.n	8001c0e <main+0x22a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c12:	a90c      	add	r1, sp, #48	; 0x30
 8001c14:	481b      	ldr	r0, [pc, #108]	; (8001c84 <main+0x2a0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c16:	930c      	str	r3, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c18:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c1a:	f7ff fd2b 	bl	8001674 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1e:	b100      	cbz	r0, 8001c22 <main+0x23e>
 8001c20:	e7fe      	b.n	8001c20 <main+0x23c>
  htim2.Instance = TIM2;
 8001c22:	4e1a      	ldr	r6, [pc, #104]	; (8001c8c <main+0x2a8>)
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c24:	2701      	movs	r7, #1
  htim2.Instance = TIM2;
 8001c26:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
  htim2.Init.Period = 0xFFFFFFFF;
 8001c2a:	f04f 3aff 	mov.w	sl, #4294967295
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c2e:	2403      	movs	r4, #3
  htim2.Init.Prescaler = 0;
 8001c30:	6070      	str	r0, [r6, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c32:	60b0      	str	r0, [r6, #8]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c34:	a913      	add	r1, sp, #76	; 0x4c
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c36:	6130      	str	r0, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c38:	61b0      	str	r0, [r6, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c3a:	9014      	str	r0, [sp, #80]	; 0x50
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c3c:	9016      	str	r0, [sp, #88]	; 0x58
  sConfig.IC1Filter = 0;
 8001c3e:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c40:	9018      	str	r0, [sp, #96]	; 0x60
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c42:	901a      	str	r0, [sp, #104]	; 0x68
  sConfig.IC2Filter = 0;
 8001c44:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c46:	4630      	mov	r0, r6
  htim2.Instance = TIM2;
 8001c48:	f8c6 9000 	str.w	r9, [r6]
  htim2.Init.Period = 0xFFFFFFFF;
 8001c4c:	f8c6 a00c 	str.w	sl, [r6, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c50:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c52:	9715      	str	r7, [sp, #84]	; 0x54
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c54:	9719      	str	r7, [sp, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c56:	f7ff faf7 	bl	8001248 <HAL_TIM_Encoder_Init>
 8001c5a:	b1c8      	cbz	r0, 8001c90 <main+0x2ac>
 8001c5c:	e7fe      	b.n	8001c5c <main+0x278>
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020400 	.word	0x40020400
 8001c70:	40020c00 	.word	0x40020c00
 8001c74:	20000138 	.word	0x20000138
 8001c78:	40010000 	.word	0x40010000
 8001c7c:	20000030 	.word	0x20000030
 8001c80:	40000800 	.word	0x40000800
 8001c84:	200000b0 	.word	0x200000b0
 8001c88:	40000400 	.word	0x40000400
 8001c8c:	200001b8 	.word	0x200001b8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c90:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c92:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c94:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c96:	4630      	mov	r0, r6
 8001c98:	f7ff fcec 	bl	8001674 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9c:	b100      	cbz	r0, 8001ca0 <main+0x2bc>
 8001c9e:	e7fe      	b.n	8001c9e <main+0x2ba>
  htim5.Instance = TIM5;
 8001ca0:	4d6b      	ldr	r5, [pc, #428]	; (8001e50 <main+0x46c>)
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001ca2:	a913      	add	r1, sp, #76	; 0x4c
  htim5.Instance = TIM5;
 8001ca4:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8001e88 <main+0x4a4>
  htim5.Init.Prescaler = 0;
 8001ca8:	6068      	str	r0, [r5, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001caa:	60a8      	str	r0, [r5, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cac:	6128      	str	r0, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cae:	61a8      	str	r0, [r5, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cb0:	9014      	str	r0, [sp, #80]	; 0x50
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cb2:	9016      	str	r0, [sp, #88]	; 0x58
  sConfig.IC1Filter = 0;
 8001cb4:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cb6:	9018      	str	r0, [sp, #96]	; 0x60
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cb8:	901a      	str	r0, [sp, #104]	; 0x68
  sConfig.IC2Filter = 0;
 8001cba:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001cbc:	4628      	mov	r0, r5
  htim5.Instance = TIM5;
 8001cbe:	f8c5 8000 	str.w	r8, [r5]
  htim5.Init.Period = 0xFFFFFFFF;
 8001cc2:	f8c5 a00c 	str.w	sl, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cc6:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cc8:	9715      	str	r7, [sp, #84]	; 0x54
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cca:	9719      	str	r7, [sp, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001ccc:	f7ff fabc 	bl	8001248 <HAL_TIM_Encoder_Init>
 8001cd0:	b100      	cbz	r0, 8001cd4 <main+0x2f0>
 8001cd2:	e7fe      	b.n	8001cd2 <main+0x2ee>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd4:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cd6:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd8:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cda:	4628      	mov	r0, r5
 8001cdc:	f7ff fcca 	bl	8001674 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce0:	b100      	cbz	r0, 8001ce4 <main+0x300>
 8001ce2:	e7fe      	b.n	8001ce2 <main+0x2fe>
  hadc1.Instance = ADC1;
 8001ce4:	4c5b      	ldr	r4, [pc, #364]	; (8001e54 <main+0x470>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cea:	4a5b      	ldr	r2, [pc, #364]	; (8001e58 <main+0x474>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cec:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cee:	6120      	str	r0, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cf0:	61a0      	str	r0, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cf2:	6220      	str	r0, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cf4:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cf6:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cf8:	6320      	str	r0, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cfa:	4620      	mov	r0, r4
  hadc1.Init.NbrOfConversion = 1;
 8001cfc:	61e7      	str	r7, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cfe:	6167      	str	r7, [r4, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d00:	e884 000c 	stmia.w	r4, {r2, r3}
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d04:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <main+0x478>)
 8001d06:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d08:	f7fe fc72 	bl	80005f0 <HAL_ADC_Init>
 8001d0c:	b100      	cbz	r0, 8001d10 <main+0x32c>
 8001d0e:	e7fe      	b.n	8001d0e <main+0x32a>
  sConfig.Channel = ADC_CHANNEL_4;
 8001d10:	f04f 0a04 	mov.w	sl, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d14:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d16:	a913      	add	r1, sp, #76	; 0x4c
 8001d18:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8001d1a:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d1e:	9714      	str	r7, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d20:	f7fe fd0a 	bl	8000738 <HAL_ADC_ConfigChannel>
 8001d24:	b100      	cbz	r0, 8001d28 <main+0x344>
 8001d26:	e7fe      	b.n	8001d26 <main+0x342>
  htim9.Instance = TIM9;
 8001d28:	4c4d      	ldr	r4, [pc, #308]	; (8001e60 <main+0x47c>)
 8001d2a:	4b4e      	ldr	r3, [pc, #312]	; (8001e64 <main+0x480>)
  htim9.Init.Prescaler = 0;
 8001d2c:	6060      	str	r0, [r4, #4]
 8001d2e:	4627      	mov	r7, r4
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d30:	60a0      	str	r0, [r4, #8]
  htim9.Init.Period = 0;
 8001d32:	60e0      	str	r0, [r4, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d34:	6120      	str	r0, [r4, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d36:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001d38:	4620      	mov	r0, r4
  htim9.Instance = TIM9;
 8001d3a:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001d3c:	f7ff fa6a 	bl	8001214 <HAL_TIM_PWM_Init>
 8001d40:	4602      	mov	r2, r0
 8001d42:	b100      	cbz	r0, 8001d46 <main+0x362>
 8001d44:	e7fe      	b.n	8001d44 <main+0x360>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d46:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8001d48:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d4a:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d4c:	a913      	add	r1, sp, #76	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d4e:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d50:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d52:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d54:	f7ff fcf6 	bl	8001744 <HAL_TIM_PWM_ConfigChannel>
 8001d58:	4604      	mov	r4, r0
 8001d5a:	b100      	cbz	r0, 8001d5e <main+0x37a>
 8001d5c:	e7fe      	b.n	8001d5c <main+0x378>
  HAL_TIM_MspPostInit(&htim9);
 8001d5e:	4638      	mov	r0, r7
 8001d60:	f000 f9a8 	bl	80020b4 <HAL_TIM_MspPostInit>
  HAL_GPIO_WritePin(IR_LED_FL_GPIO_Port,IR_LED_FL_Pin,GPIO_PIN_RESET); // Eteint le LED IR
 8001d64:	4622      	mov	r2, r4
 8001d66:	2108      	movs	r1, #8
 8001d68:	483f      	ldr	r0, [pc, #252]	; (8001e68 <main+0x484>)
 8001d6a:	f7fe fee7 	bl	8000b3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IR_LED_FR_GPIO_Port,IR_LED_FR_Pin,GPIO_PIN_RESET); // Eteint le LED IR
 8001d6e:	4622      	mov	r2, r4
 8001d70:	4651      	mov	r1, sl
 8001d72:	483d      	ldr	r0, [pc, #244]	; (8001e68 <main+0x484>)
 8001d74:	f7fe fee2 	bl	8000b3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET); // droite ON
 8001d78:	4622      	mov	r2, r4
 8001d7a:	2108      	movs	r1, #8
 8001d7c:	483b      	ldr	r0, [pc, #236]	; (8001e6c <main+0x488>)
 8001d7e:	f7fe fedd 	bl	8000b3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET); // gauche ON
 8001d82:	4622      	mov	r2, r4
 8001d84:	4651      	mov	r1, sl
 8001d86:	483a      	ldr	r0, [pc, #232]	; (8001e70 <main+0x48c>)
 8001d88:	f7fe fed8 	bl	8000b3c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	4839      	ldr	r0, [pc, #228]	; (8001e74 <main+0x490>)
 8001d90:	f7ff fc06 	bl	80015a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001d94:	4651      	mov	r1, sl
 8001d96:	4837      	ldr	r0, [pc, #220]	; (8001e74 <main+0x490>)
 8001d98:	f7ff fc02 	bl	80015a0 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001d9c:	213c      	movs	r1, #60	; 0x3c
 8001d9e:	4630      	mov	r0, r6
		  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET); // droite Off
 8001da0:	4e32      	ldr	r6, [pc, #200]	; (8001e6c <main+0x488>)
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001da2:	f7ff f992 	bl	80010ca <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001da6:	213c      	movs	r1, #60	; 0x3c
 8001da8:	4833      	ldr	r0, [pc, #204]	; (8001e78 <main+0x494>)
 8001daa:	f7ff f98e 	bl	80010ca <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8001dae:	213c      	movs	r1, #60	; 0x3c
 8001db0:	4832      	ldr	r0, [pc, #200]	; (8001e7c <main+0x498>)
 8001db2:	f7ff f98a 	bl	80010ca <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 8001db6:	213c      	movs	r1, #60	; 0x3c
 8001db8:	4628      	mov	r0, r5
 8001dba:	f7ff f986 	bl	80010ca <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_1);
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	4638      	mov	r0, r7
 8001dc2:	f7ff fbed 	bl	80015a0 <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 8001dc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dca:	f7fe fbff 	bl	80005cc <HAL_Delay>
  position = (TIM2->CNT - TIM3->CNT + TIM4->CNT + TIM5->CNT); //vitesse de rotation des moteurs /12 car 12 impulsions/mesures par tour de roue par les encodeurs
 8001dce:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8001dd2:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <main+0x49c>)
		  htim9.Instance->PSC = 1000; //300..3000
 8001dd4:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
  position = (TIM2->CNT - TIM3->CNT + TIM4->CNT + TIM5->CNT); //vitesse de rotation des moteurs /12 car 12 impulsions/mesures par tour de roue par les encodeurs
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <main+0x4a0>)
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
		  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET); // gauche Off
 8001de2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001e70 <main+0x48c>
	  switch(current_state)
 8001de6:	2c01      	cmp	r4, #1
 8001de8:	d2fd      	bcs.n	8001de6 <main+0x402>
		  if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port,BUTTON1_Pin)==GPIO_PIN_RESET)
 8001dea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dee:	4630      	mov	r0, r6
 8001df0:	f7fe fe9e 	bl	8000b30 <HAL_GPIO_ReadPin>
 8001df4:	4605      	mov	r5, r0
 8001df6:	b9f8      	cbnz	r0, 8001e38 <main+0x454>
			  init_avance();
 8001df8:	f7ff fd98 	bl	800192c <init_avance>
			  tim_start=HAL_GetTick();
 8001dfc:	f7fe fbe0 	bl	80005c0 <HAL_GetTick>
			  run(0,0);
 8001e00:	4629      	mov	r1, r5
 8001e02:	4628      	mov	r0, r5
 8001e04:	f7ff fd24 	bl	8001850 <run>
			  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET); // droite ON
 8001e08:	462a      	mov	r2, r5
 8001e0a:	2108      	movs	r1, #8
 8001e0c:	4630      	mov	r0, r6
 8001e0e:	f7fe fe95 	bl	8000b3c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET); // gauche ON
 8001e12:	462a      	mov	r2, r5
		  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET); // gauche Off
 8001e14:	2104      	movs	r1, #4
 8001e16:	4640      	mov	r0, r8
 8001e18:	f7fe fe90 	bl	8000b3c <HAL_GPIO_WritePin>
		  htim9.Instance->PSC = 1000; //300..3000
 8001e1c:	683b      	ldr	r3, [r7, #0]
		  htim9.Instance->CCR1 = 200; // 00..1000
 8001e1e:	22c8      	movs	r2, #200	; 0xc8
		  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET); // droite Off
 8001e20:	2108      	movs	r1, #8
		  htim9.Instance->PSC = 1000; //300..3000
 8001e22:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
		  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET); // droite Off
 8001e26:	4630      	mov	r0, r6
		  htim9.Instance->CCR1 = 200; // 00..1000
 8001e28:	635a      	str	r2, [r3, #52]	; 0x34
	      __HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_1,50);
 8001e2a:	2232      	movs	r2, #50	; 0x32
 8001e2c:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET); // droite Off
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f7fe fe84 	bl	8000b3c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET); // gauche Off
 8001e34:	2201      	movs	r2, #1
 8001e36:	e7ed      	b.n	8001e14 <main+0x430>
			  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET); // droite Off
 8001e38:	4630      	mov	r0, r6
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	2108      	movs	r1, #8
 8001e3e:	f7fe fe7d 	bl	8000b3c <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET); // gauche Off
 8001e42:	2201      	movs	r2, #1
 8001e44:	2104      	movs	r1, #4
 8001e46:	4640      	mov	r0, r8
 8001e48:	f7fe fe78 	bl	8000b3c <HAL_GPIO_WritePin>
 8001e4c:	e7cb      	b.n	8001de6 <main+0x402>
 8001e4e:	bf00      	nop
 8001e50:	20000070 	.word	0x20000070
 8001e54:	200000f0 	.word	0x200000f0
 8001e58:	40012000 	.word	0x40012000
 8001e5c:	0f000001 	.word	0x0f000001
 8001e60:	20000178 	.word	0x20000178
 8001e64:	40014000 	.word	0x40014000
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	40021000 	.word	0x40021000
 8001e74:	20000138 	.word	0x20000138
 8001e78:	200000b0 	.word	0x200000b0
 8001e7c:	20000030 	.word	0x20000030
 8001e80:	40000400 	.word	0x40000400
 8001e84:	40000800 	.word	0x40000800
 8001e88:	40000c00 	.word	0x40000c00

08001e8c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_MspInit+0x88>)
{
 8001e8e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e92:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
 8001e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e9c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001ea0:	9200      	str	r2, [sp, #0]
 8001ea2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ea6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eaa:	645a      	str	r2, [r3, #68]	; 0x44
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb6:	f7fe fcdf 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f06f 000b 	mvn.w	r0, #11
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	f7fe fceb 	bl	800089c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f06f 000a 	mvn.w	r0, #10
 8001ecc:	4611      	mov	r1, r2
 8001ece:	f7fe fce5 	bl	800089c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f06f 0009 	mvn.w	r0, #9
 8001ed8:	4611      	mov	r1, r2
 8001eda:	f7fe fcdf 	bl	800089c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f06f 0004 	mvn.w	r0, #4
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	f7fe fcd9 	bl	800089c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	f06f 0003 	mvn.w	r0, #3
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	f7fe fcd3 	bl	800089c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f06f 0001 	mvn.w	r0, #1
 8001efc:	4611      	mov	r1, r2
 8001efe:	f7fe fccd 	bl	800089c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	4611      	mov	r1, r2
 8001f0a:	f7fe fcc7 	bl	800089c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0e:	b003      	add	sp, #12
 8001f10:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f14:	40023800 	.word	0x40023800

08001f18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001f1a:	6802      	ldr	r2, [r0, #0]
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <HAL_ADC_MspInit+0x3c>)
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d114      	bne.n	8001f4c <HAL_ADC_MspInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f22:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	a901      	add	r1, sp, #4
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f3c:	23f0      	movs	r3, #240	; 0xf0
 8001f3e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f40:	2303      	movs	r3, #3
 8001f42:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f7fe fd08 	bl	800095c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f4c:	b007      	add	sp, #28
 8001f4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f52:	bf00      	nop
 8001f54:	40012000 	.word	0x40012000
 8001f58:	40020000 	.word	0x40020000

08001f5c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 8001f5c:	6802      	ldr	r2, [r0, #0]
{
 8001f5e:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <HAL_TIM_Base_MspInit+0x24>)
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d10a      	bne.n	8001f7c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f66:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f7c:	b002      	add	sp, #8
 8001f7e:	4770      	bx	lr
 8001f80:	40010000 	.word	0x40010000

08001f84 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM2)
 8001f84:	6803      	ldr	r3, [r0, #0]
 8001f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001f8a:	b570      	push	{r4, r5, r6, lr}
 8001f8c:	b08a      	sub	sp, #40	; 0x28
  if(htim_encoder->Instance==TIM2)
 8001f8e:	d124      	bne.n	8001fda <HAL_TIM_Encoder_MspInit+0x56>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f90:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = LEFT_ENCODER_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f98:	2501      	movs	r5, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(LEFT_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8001f9c:	a905      	add	r1, sp, #20
 8001f9e:	4833      	ldr	r0, [pc, #204]	; (800206c <HAL_TIM_Encoder_MspInit+0xe8>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fa0:	f042 0201 	orr.w	r2, r2, #1
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	9606      	str	r6, [sp, #24]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001faa:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	9408      	str	r4, [sp, #32]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LEFT_ENCODER_B_Pin;
 8001fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fba:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = LEFT_ENCODER_B_Pin;
 8001fbc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LEFT_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8001fbe:	f7fe fccd 	bl	800095c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEFT_ENCODER_A_Pin;
 8001fc2:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(LEFT_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8001fc4:	a905      	add	r1, sp, #20
 8001fc6:	482a      	ldr	r0, [pc, #168]	; (8002070 <HAL_TIM_Encoder_MspInit+0xec>)
    GPIO_InitStruct.Pin = LEFT_ENCODER_A_Pin;
 8001fc8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fd0:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = LEFT_ENCODER_D_Pin|LEFT_ENCODER_C_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd2:	f7fe fcc3 	bl	800095c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001fd6:	b00a      	add	sp, #40	; 0x28
 8001fd8:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim_encoder->Instance==TIM3)
 8001fda:	4a26      	ldr	r2, [pc, #152]	; (8002074 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d114      	bne.n	800200a <HAL_TIM_Encoder_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fe0:	4b25      	ldr	r3, [pc, #148]	; (8002078 <HAL_TIM_Encoder_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe2:	a905      	add	r1, sp, #20
 8001fe4:	4825      	ldr	r0, [pc, #148]	; (800207c <HAL_TIM_Encoder_MspInit+0xf8>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe8:	f042 0202 	orr.w	r2, r2, #2
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	9207      	str	r2, [sp, #28]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ff4:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	9208      	str	r2, [sp, #32]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ffa:	9302      	str	r3, [sp, #8]
 8001ffc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RIGHT_ENCODER_A_Pin|RIGHT_ENCODER_B_Pin;
 8001ffe:	23c0      	movs	r3, #192	; 0xc0
 8002000:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002006:	9309      	str	r3, [sp, #36]	; 0x24
 8002008:	e7e3      	b.n	8001fd2 <HAL_TIM_Encoder_MspInit+0x4e>
  else if(htim_encoder->Instance==TIM4)
 800200a:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <HAL_TIM_Encoder_MspInit+0xfc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d115      	bne.n	800203c <HAL_TIM_Encoder_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_TIM_Encoder_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002012:	a905      	add	r1, sp, #20
 8002014:	481b      	ldr	r0, [pc, #108]	; (8002084 <HAL_TIM_Encoder_MspInit+0x100>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002018:	f042 0204 	orr.w	r2, r2, #4
 800201c:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	9207      	str	r2, [sp, #28]
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002024:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	9208      	str	r2, [sp, #32]
    __HAL_RCC_TIM4_CLK_ENABLE();
 800202a:	9303      	str	r3, [sp, #12]
 800202c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = RIGHT_ENCODER_D_Pin|RIGHT_ENCODER_C_Pin;
 800202e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002032:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002038:	9309      	str	r3, [sp, #36]	; 0x24
 800203a:	e7ca      	b.n	8001fd2 <HAL_TIM_Encoder_MspInit+0x4e>
  else if(htim_encoder->Instance==TIM5)
 800203c:	4a12      	ldr	r2, [pc, #72]	; (8002088 <HAL_TIM_Encoder_MspInit+0x104>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d1c9      	bne.n	8001fd6 <HAL_TIM_Encoder_MspInit+0x52>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_TIM_Encoder_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	a905      	add	r1, sp, #20
 8002046:	4809      	ldr	r0, [pc, #36]	; (800206c <HAL_TIM_Encoder_MspInit+0xe8>)
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800204a:	f042 0208 	orr.w	r2, r2, #8
 800204e:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2200      	movs	r2, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	9207      	str	r2, [sp, #28]
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002056:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	9208      	str	r2, [sp, #32]
    __HAL_RCC_TIM5_CLK_ENABLE();
 800205c:	9304      	str	r3, [sp, #16]
 800205e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = LEFT_ENCODER_D_Pin|LEFT_ENCODER_C_Pin;
 8002060:	2303      	movs	r3, #3
 8002062:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002068:	9309      	str	r3, [sp, #36]	; 0x24
 800206a:	e7b2      	b.n	8001fd2 <HAL_TIM_Encoder_MspInit+0x4e>
 800206c:	40020000 	.word	0x40020000
 8002070:	40020400 	.word	0x40020400
 8002074:	40000400 	.word	0x40000400
 8002078:	40023800 	.word	0x40023800
 800207c:	40020800 	.word	0x40020800
 8002080:	40000800 	.word	0x40000800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40000c00 	.word	0x40000c00

0800208c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM9)
 800208c:	6802      	ldr	r2, [r0, #0]
{
 800208e:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM9)
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <HAL_TIM_PWM_MspInit+0x24>)
 8002092:	429a      	cmp	r2, r3
 8002094:	d10a      	bne.n	80020ac <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002096:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800209a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800209c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020a0:	645a      	str	r2, [r3, #68]	; 0x44
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80020ac:	b002      	add	sp, #8
 80020ae:	4770      	bx	lr
 80020b0:	40014000 	.word	0x40014000

080020b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 80020b6:	6803      	ldr	r3, [r0, #0]
 80020b8:	4a0f      	ldr	r2, [pc, #60]	; (80020f8 <HAL_TIM_MspPostInit+0x44>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d110      	bne.n	80020e0 <HAL_TIM_MspPostInit+0x2c>
  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = RIGHT_PWM_Pin|LEFT_PWM_Pin;
 80020be:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80020c2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020ce:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = BUZZER_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80020d0:	a901      	add	r1, sp, #4
 80020d2:	480a      	ldr	r0, [pc, #40]	; (80020fc <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80020d4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f7fe fc41 	bl	800095c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80020da:	b007      	add	sp, #28
 80020dc:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM9)
 80020e0:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_TIM_MspPostInit+0x4c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d1f9      	bne.n	80020da <HAL_TIM_MspPostInit+0x26>
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80020e6:	2320      	movs	r3, #32
 80020e8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e7eb      	b.n	80020d0 <HAL_TIM_MspPostInit+0x1c>
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40021000 	.word	0x40021000
 8002100:	40014000 	.word	0x40014000

08002104 <NMI_Handler>:
 8002104:	4770      	bx	lr

08002106 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002106:	e7fe      	b.n	8002106 <HardFault_Handler>

08002108 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002108:	e7fe      	b.n	8002108 <MemManage_Handler>

0800210a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800210a:	e7fe      	b.n	800210a <BusFault_Handler>

0800210c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800210c:	e7fe      	b.n	800210c <UsageFault_Handler>

0800210e <SVC_Handler>:
 800210e:	4770      	bx	lr

08002110 <DebugMon_Handler>:
 8002110:	4770      	bx	lr

08002112 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002112:	4770      	bx	lr

08002114 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002114:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002116:	f7fe fa47 	bl	80005a8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800211e:	f7fe bc18 	b.w	8000952 <HAL_SYSTICK_IRQHandler>
	...

08002124 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002124:	490f      	ldr	r1, [pc, #60]	; (8002164 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002126:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002128:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800212c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <SystemInit+0x44>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800213e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002146:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800214a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800214c:	4a07      	ldr	r2, [pc, #28]	; (800216c <SystemInit+0x48>)
 800214e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002156:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002158:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800215a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800215e:	608b      	str	r3, [r1, #8]
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000ed00 	.word	0xe000ed00
 8002168:	40023800 	.word	0x40023800
 800216c:	24003010 	.word	0x24003010

08002170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002174:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002176:	e003      	b.n	8002180 <LoopCopyDataInit>

08002178 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800217a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800217c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800217e:	3104      	adds	r1, #4

08002180 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002180:	480b      	ldr	r0, [pc, #44]	; (80021b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002184:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002186:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002188:	d3f6      	bcc.n	8002178 <CopyDataInit>
  ldr  r2, =_sbss
 800218a:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800218c:	e002      	b.n	8002194 <LoopFillZerobss>

0800218e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800218e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002190:	f842 3b04 	str.w	r3, [r2], #4

08002194 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002196:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002198:	d3f9      	bcc.n	800218e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800219a:	f7ff ffc3 	bl	8002124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800219e:	f000 f811 	bl	80021c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a2:	f7ff fc1f 	bl	80019e4 <main>
  bx  lr    
 80021a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021a8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80021ac:	08002244 	.word	0x08002244
  ldr  r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021b4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80021b8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80021bc:	200001f8 	.word	0x200001f8

080021c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC_IRQHandler>
	...

080021c4 <__libc_init_array>:
 80021c4:	b570      	push	{r4, r5, r6, lr}
 80021c6:	4e0d      	ldr	r6, [pc, #52]	; (80021fc <__libc_init_array+0x38>)
 80021c8:	4c0d      	ldr	r4, [pc, #52]	; (8002200 <__libc_init_array+0x3c>)
 80021ca:	1ba4      	subs	r4, r4, r6
 80021cc:	10a4      	asrs	r4, r4, #2
 80021ce:	2500      	movs	r5, #0
 80021d0:	42a5      	cmp	r5, r4
 80021d2:	d109      	bne.n	80021e8 <__libc_init_array+0x24>
 80021d4:	4e0b      	ldr	r6, [pc, #44]	; (8002204 <__libc_init_array+0x40>)
 80021d6:	4c0c      	ldr	r4, [pc, #48]	; (8002208 <__libc_init_array+0x44>)
 80021d8:	f000 f818 	bl	800220c <_init>
 80021dc:	1ba4      	subs	r4, r4, r6
 80021de:	10a4      	asrs	r4, r4, #2
 80021e0:	2500      	movs	r5, #0
 80021e2:	42a5      	cmp	r5, r4
 80021e4:	d105      	bne.n	80021f2 <__libc_init_array+0x2e>
 80021e6:	bd70      	pop	{r4, r5, r6, pc}
 80021e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021ec:	4798      	blx	r3
 80021ee:	3501      	adds	r5, #1
 80021f0:	e7ee      	b.n	80021d0 <__libc_init_array+0xc>
 80021f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021f6:	4798      	blx	r3
 80021f8:	3501      	adds	r5, #1
 80021fa:	e7f2      	b.n	80021e2 <__libc_init_array+0x1e>
 80021fc:	0800223c 	.word	0x0800223c
 8002200:	0800223c 	.word	0x0800223c
 8002204:	0800223c 	.word	0x0800223c
 8002208:	08002240 	.word	0x08002240

0800220c <_init>:
 800220c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220e:	bf00      	nop
 8002210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002212:	bc08      	pop	{r3}
 8002214:	469e      	mov	lr, r3
 8002216:	4770      	bx	lr

08002218 <_fini>:
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221a:	bf00      	nop
 800221c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800221e:	bc08      	pop	{r3}
 8002220:	469e      	mov	lr, r3
 8002222:	4770      	bx	lr
